module Oscar.Prelude where

open import Agda.Primitive
     using ( Level
           )
  renaming ( _‚äî_ to _‚äî‚Çó_
           ; lsuc to ùüô+‚Çó
           ; lzero to ùüò‚Çó
           )
     public

open import Relation.Binary public
     using ( IsDecEquivalence
           ; DecTotalOrder
           ; IsDecTotalOrder
           )
open import Agda.Builtin.Equality public
     using ( _‚â°_
           ; refl
           )

open import Data.Nat.Base public
     using ( ‚Ñï
           ; _+_
           ; _*_
           )
  renaming ( suc to ùüô+ )

open import Data.Nat public
     using ( decTotalOrder
           )

open import Relation.Binary.Core public
     using ( _‚â¢_
           )
     
open import Relation.Nullary public
     using ( ¬¨_
           )

open import Data.Product public
     using ( Œ£
           ; _,_
           ; ‚àÉ
           ; _√ó_ )
  renaming ( proj‚ÇÅ to ‚Üô
           ; proj‚ÇÇ to ‚Üò
           )

open import Data.Sum public
     using ( _‚äé_
           ; [_,_]
           ; [_,_]‚Ä≤
           )
  renaming ( inj‚ÇÅ to ‚Üñ
           ; inj‚ÇÇ to ‚Üó
           )

open import Relation.Nullary public
     using ( Dec
           ; yes
           ; no
           )

open import Function public
     using ( case_of_
           ; id
           )

open import Function public
     using ( _$_
           ; _‚àò_
           ; flip
           )

open import Data.Empty public
     using ( ‚ä•-elim
           )

open import Relation.Nullary.Negation public
     using ( contradiction
           ; decidable-stable
           )

open import Agda.Builtin.List public
     using ( List
           ; []
           ; _‚à∑_
           )
           
open import Relation.Binary.PropositionalEquality.Core public
     using ( trans
           )
