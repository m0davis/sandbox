--{-# OPTIONS --show-implicit #-}
{-# OPTIONS -vprofile:10 #-}
module SnowflakeSnoc where

open import Prelude
  renaming ( _==_ to _‚âü_
           ; List to ùë≥
           ; [] to ‚àÖ
           ; _‚à∑_ to _‚à∑‚Çó_
           )
  using ( ‚ä•
        ; ¬¨_
        ; _‚â°_
        ; ‚ä§
        ; case_of_
        ; ‚ä•-elim
        ; refl
        ; ‚àÉ
        ; _,_
        ; _√ó_
        ; fst ; snd
        ; Dec
        ; yes
        ; no
        ; Eq
        ; flip
        ; sym
        ; _‚äî_
        ; _<_
        ; _‚â•_
        )

open import Relation.Nullary.Decidable using ()

open import Agda.Builtin.Nat using (suc; _-_; _+_) renaming (Nat to ‚Ñï)
open import Relation.Binary.PropositionalEquality using (subst)
open import Tactic.Reflection.Reright
open import Tactic.Nat.Prelude


private
  _‚â¢_ : ‚àÄ {a} {A : Set a} ‚Üí A ‚Üí A ‚Üí Set a
  A ‚â¢ B = ¬¨ A ‚â° B

  infix 0 _‚Üî_
  _‚Üî_ : ‚àÄ {a b} (l : Set a) (r : Set b) ‚Üí Set (a ‚äî b)
  l ‚Üî r = (l ‚Üí r) √ó (r ‚Üí l)

data ùïÉ {ùë®} (ùê¥ : Set ùë®) : Set ùë®
data _‚àâ_ {ùë®} {ùê¥ : Set ùë®} (x : ùê¥) : ùïÉ ùê¥ ‚Üí Set ùë®

data ùïÉ {ùë®} (ùê¥ : Set ùë®) where
  ‚àÖ : ùïÉ ùê¥
  ‚à∑ : {x‚ÇÄ : ùê¥} ‚Üí {x‚ÇÅs : ùïÉ ùê¥} ‚Üí x‚ÇÄ ‚àâ x‚ÇÅs ‚Üí ùïÉ ùê¥

data _‚àâ_ {ùë®} {ùê¥ : Set ùë®} (ùîû : ùê¥) where
  ‚àâ‚àÖ : ùîû ‚àâ ‚àÖ
  ‚àâ‚à∑ : ‚àÄ {x‚ÇÄ} ‚Üí ùîû ‚â¢ x‚ÇÄ ‚Üí ‚àÄ {x‚ÇÅs} ‚Üí ùîû ‚àâ x‚ÇÅs ‚Üí (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) ‚Üí ùîû ‚àâ (‚à∑ x‚ÇÄ‚àâx‚ÇÅs)

ùïÉ‚Üíùë≥ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ùë≥ ùê¥
ùïÉ‚Üíùë≥ ‚àÖ = ‚àÖ
ùïÉ‚Üíùë≥ (‚à∑ {x} ‚àâ‚àÖ) = x ‚à∑‚Çó ‚àÖ
ùïÉ‚Üíùë≥ (‚à∑ {x‚ÇÄ} (‚àâ‚à∑ {x‚ÇÅ} x {x‚ÇÇs} x3 x4)) = x‚ÇÄ ‚à∑‚Çó x‚ÇÅ ‚à∑‚Çó ùïÉ‚Üíùë≥ x‚ÇÇs

data _‚àà_ {ùë®} {ùê¥ : Set ùë®} (ùîû : ùê¥) : ùïÉ ùê¥ ‚Üí Set ùë® where
  here : ‚àÄ {x‚ÇÄs} (ùîû‚àâx‚ÇÄs : ùîû ‚àâ x‚ÇÄs) ‚Üí ùîû ‚àà ‚à∑ ùîû‚àâx‚ÇÄs
  there : ‚àÄ {x‚ÇÅs} ‚Üí (ùîû‚ààx‚ÇÅs : ùîû ‚àà x‚ÇÅs) ‚Üí ‚àÄ {x‚ÇÄ} ‚Üí (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs)  ‚Üí ùîû ‚àà ‚à∑ x‚ÇÄ‚àâx‚ÇÅs

‚àâ‚Üí‚àà‚Üí‚ä• : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {ùîû} {xs : ùïÉ ùê¥} ‚Üí ùîû ‚àâ xs ‚Üí ùîû ‚àà xs ‚Üí ‚ä•
‚àâ‚Üí‚àà‚Üí‚ä• ‚àâ‚àÖ ()
‚àâ‚Üí‚àà‚Üí‚ä• (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÄ _ _) (here _) = x‚ÇÄ‚â¢x‚ÇÄ refl
‚àâ‚Üí‚àà‚Üí‚ä• (‚àâ‚à∑ ùîû‚â¢x‚ÇÄ ùîû‚àâx‚ÇÅs _) (there ùîû‚ààx‚ÇÅs x‚ÇÄ‚àâx‚ÇÅs) = ‚àâ‚Üí‚àà‚Üí‚ä• ùîû‚àâx‚ÇÅs ùîû‚ààx‚ÇÅs

_‚àâ?_ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚¶É _ : Eq ùê¥ ‚¶Ñ (ùîû : ùê¥) (xs : ùïÉ ùê¥) ‚Üí Dec (ùîû ‚àâ xs)
ùîû ‚àâ? ‚àÖ = yes ‚àâ‚àÖ
ùîû ‚àâ? ‚à∑ {x‚ÇÄ} {x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs with ùîû ‚âü x‚ÇÄ
... | yes ùîû‚â°x‚ÇÄ rewrite ùîû‚â°x‚ÇÄ = no (flip ‚àâ‚Üí‚àà‚Üí‚ä• (here x‚ÇÄ‚àâx‚ÇÅs))
... | no ùîû‚â¢x‚ÇÄ with ùîû ‚àâ? x‚ÇÅs
... | yes ùîû‚àâx‚ÇÅs = yes (‚àâ‚à∑ ùîû‚â¢x‚ÇÄ ùîû‚àâx‚ÇÅs x‚ÇÄ‚àâx‚ÇÅs)
... | no ¬¨ùîû‚àâx‚ÇÅs = no (Œª {(‚àâ‚à∑ _ ùîû‚àâx‚ÇÅs _) ‚Üí ¬¨ùîû‚àâx‚ÇÅs ùîû‚àâx‚ÇÅs})

data _[_]=_ {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí ‚Ñï ‚Üí ùê¥ ‚Üí Set ùë® where
  here  : ‚àÄ {ùîû xs} (ùîû‚àâxs : ùîû ‚àâ xs) ‚Üí ‚à∑ ùîû‚àâxs [ 0 ]= ùîû
  there : ‚àÄ {x‚ÇÄ x‚ÇÅs} (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) {i ùîû} (x‚ÇÅs[i]=ùîû : x‚ÇÅs [ i ]= ùîû) ‚Üí ‚à∑ x‚ÇÄ‚àâx‚ÇÅs [ suc i ]= ùîû
{-
remove : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {a : ùê¥} {L : ùïÉ ùê¥} {n : ‚Ñï} ‚Üí L [ n ]= a ‚Üí ‚àÉ Œª L/a ‚Üí ‚àÄ n' ‚Üí (n' < n ‚Üí ‚àÄ a' ‚Üí L [ n' ]= a' ‚Üí L/a [ n' ]= a') √ó (n' ‚â• n ‚Üí ‚àÄ a' ‚Üí L [ suc n' ]= a' ‚Üí L/a [ n' ]= a')
remove (here {xs = L‚ÇÅ} a‚àâL‚ÇÅ) = L‚ÇÅ , (Œª n' ‚Üí (Œª { (Prelude.diff _ ()) _ _ }) , (Œª n'‚â•0 a' ‚Üí Œª { (there .a‚àâL‚ÇÅ L‚ÇÅ[n']=a') ‚Üí L‚ÇÅ[n']=a' }))
remove (there x‚ÇÄ‚àâx‚ÇÅs x‚ÇÅs[i]=a) with remove x‚ÇÅs[i]=a
remove (there {x‚ÇÄ} {x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs x‚ÇÅs[i]=a) | x , y = {!!}

pick : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {a : ùê¥} {L : ùïÉ ùê¥} ‚Üí a ‚àà L ‚Üí ‚àÉ Œª L/a ‚Üí ‚àÄ x ‚Üí (x ‚àà L/a) ‚Üî (x ‚àà L √ó x ‚â¢ a)
pick {a = a} (here ‚àâ‚àÖ) = ‚àÖ , (Œª x ‚Üí (Œª ()) , (Œª { (x‚ààa , x‚â¢a) ‚Üí {!!} }))
pick (here (‚àâ‚à∑ x ùîû‚àâx‚ÇÄs‚ÇÅ ùîû‚àâx‚ÇÄs)) = {!!}
pick (there {x‚ÇÅs} a‚ààx‚ÇÅs {x‚ÇÄ} x‚ÇÄ‚àâx‚ÇÅs) = {!!} , {!!}
-}
data _‚âõ_ {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí ùïÉ ùê¥ ‚Üí Set ùë® where
  ‚àÖ : ‚àÖ ‚âõ ‚àÖ

[]=-thm‚ÇÄ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L : ùïÉ ùê¥} {n} {a} ‚Üí L [ n ]= a ‚Üí a ‚àâ L ‚Üí ‚ä•
[]=-thm‚ÇÄ (here ùîû‚àâxs) (‚àâ‚à∑ x x‚ÇÅ .ùîû‚àâxs) = x refl
[]=-thm‚ÇÄ (there x‚ÇÄ‚àâx‚ÇÅs x) (‚àâ‚à∑ x‚ÇÅ x‚ÇÇ .x‚ÇÄ‚àâx‚ÇÅs) = []=-thm‚ÇÄ x x‚ÇÇ


[]=-thm‚ÇÅ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L : ùïÉ ùê¥} {n‚ÇÅ n‚ÇÇ : ‚Ñï} {a‚ÇÅ a‚ÇÇ : ùê¥} ‚Üí L [ n‚ÇÅ ]= a‚ÇÅ ‚Üí L [ n‚ÇÇ ]= a‚ÇÇ ‚Üí n‚ÇÅ ‚â° n‚ÇÇ ‚Üî a‚ÇÅ ‚â° a‚ÇÇ
[]=-thm‚ÇÅ (here ùîû‚àâxs) (here .ùîû‚àâxs) = (Œª x ‚Üí refl) , (Œª x ‚Üí refl)
[]=-thm‚ÇÅ (here ùîû‚àâxs) (there .ùîû‚àâxs x‚ÇÅ) = (Œª ()) , Œª a‚ÇÅ‚â°a‚ÇÇ ‚Üí (‚ä•-elim ([]=-thm‚ÇÄ (subst _ (sym a‚ÇÅ‚â°a‚ÇÇ) x‚ÇÅ ) ùîû‚àâxs))
[]=-thm‚ÇÅ {L = ‚à∑ .a‚ÇÇ‚àâx‚ÇÅs} (there {x‚ÇÅs = x‚ÇÅs} a‚ÇÇ‚àâx‚ÇÅs {i} x‚ÇÅs[i]=a‚ÇÅ) (here .a‚ÇÇ‚àâx‚ÇÅs) = (Œª ()) , (Œª a‚ÇÅ‚â°a‚ÇÇ ‚Üí ‚ä•-elim ([]=-thm‚ÇÄ (subst (x‚ÇÅs [ i ]=_) a‚ÇÅ‚â°a‚ÇÇ x‚ÇÅs[i]=a‚ÇÅ) a‚ÇÇ‚àâx‚ÇÅs))
[]=-thm‚ÇÅ (there x‚ÇÄ‚àâx‚ÇÅs x) (there .x‚ÇÄ‚àâx‚ÇÅs x‚ÇÅ) = (Œª ss ‚Üí fst ([]=-thm‚ÇÅ x x‚ÇÅ) (by ss)) , (Œª x1=x2 ‚Üí by (snd ([]=-thm‚ÇÅ x x‚ÇÅ) x1=x2))

data ‚àÖ‚äÇ_ {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí Set ùë® where
  ‚àÖ‚äÇ‚à∑ : ‚àÄ {x‚ÇÄ x‚ÇÅs} ‚Üí (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) ‚Üí ‚àÖ‚äÇ ‚à∑ x‚ÇÄ‚àâx‚ÇÅs

‚àà‚Üí‚àÖ‚äÇ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {ùîû : ùê¥} {xs : ùïÉ ùê¥} ‚Üí ùîû ‚àà xs ‚Üí ‚àÖ‚äÇ xs
‚àà‚Üí‚àÖ‚äÇ (here ùîû‚àâx‚ÇÄs) = ‚àÖ‚äÇ‚à∑ ùîû‚àâx‚ÇÄs
‚àà‚Üí‚àÖ‚äÇ (there _ x‚ÇÄ‚àâx‚ÇÅs) = ‚àÖ‚äÇ‚à∑ x‚ÇÄ‚àâx‚ÇÅs

lastIndex : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L : ùïÉ ùê¥} (‚àÖ‚äÇL : ‚àÖ‚äÇ L) ‚Üí ‚Ñï
lastIndex (‚àÖ‚äÇ‚à∑ ‚àâ‚àÖ) = 0
lastIndex (‚àÖ‚äÇ‚à∑ (‚àâ‚à∑ x x‚ÇÄ‚àâx‚ÇÅs‚ÇÅ x‚ÇÄ‚àâx‚ÇÅs)) = suc (lastIndex (‚àÖ‚äÇ‚à∑ x‚ÇÄ‚àâx‚ÇÅs))

length : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ‚Ñï
length ‚àÖ = 0
length (‚à∑ {x‚ÇÅs = x‚ÇÅs} _) = suc (length x‚ÇÅs)

open import Data.Permutation renaming (_‚à∑_ to _‚à∑‚Çö_)
open import Data.Fin hiding (_-_; _+_) -- renaming (_‚à∑_ to _‚à∑·∂†_)

sym' : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x y : ùê¥} ‚Üí x ‚â¢ y ‚Üí y ‚â¢ x
sym' x‚ÇÅ x‚ÇÇ = x‚ÇÅ (sym x‚ÇÇ)

postulate
  T : Set
  ‚ãÜa ‚ãÜb ‚ãÜc ‚ãÜd : T
  a‚â¢b : ‚ãÜa ‚â¢ ‚ãÜb
  a‚â¢c : ‚ãÜa ‚â¢ ‚ãÜc
  a‚â¢d : ‚ãÜa ‚â¢ ‚ãÜd
  b‚â¢c : ‚ãÜb ‚â¢ ‚ãÜc
  b‚â¢d : ‚ãÜb ‚â¢ ‚ãÜd
  c‚â¢d : ‚ãÜc ‚â¢ ‚ãÜd

b‚â¢a = sym' a‚â¢b
c‚â¢a = sym' a‚â¢c
d‚â¢a = sym' a‚â¢d
c‚â¢b = sym' b‚â¢c
d‚â¢b = sym' b‚â¢d
d‚â¢c = sym' c‚â¢d

a‚àâ‚àÖ : ‚ãÜa ‚àâ ‚àÖ
a‚àâ‚àÖ = ‚àâ‚àÖ

a‚àâb   = ‚àâ‚à∑ a‚â¢b ‚àâ‚àÖ ‚àâ‚àÖ
c‚àâb   = ‚àâ‚à∑ c‚â¢b ‚àâ‚àÖ ‚àâ‚àÖ
d‚àâb   = ‚àâ‚à∑ d‚â¢b ‚àâ‚àÖ ‚àâ‚àÖ
a‚àâc   = ‚àâ‚à∑ a‚â¢c ‚àâ‚àÖ ‚àâ‚àÖ
b‚àâc   = ‚àâ‚à∑ b‚â¢c ‚àâ‚àÖ ‚àâ‚àÖ
c‚àâd   = ‚àâ‚à∑ c‚â¢d ‚àâ‚àÖ ‚àâ‚àÖ
b‚àâd   = ‚àâ‚à∑ b‚â¢d ‚àâ‚àÖ ‚àâ‚àÖ
a‚àâd   = ‚àâ‚à∑ a‚â¢d ‚àâ‚àÖ ‚àâ‚àÖ
b‚àâa   = ‚àâ‚à∑ b‚â¢a ‚àâ‚àÖ ‚àâ‚àÖ
c‚àâa   = ‚àâ‚à∑ c‚â¢a ‚àâ‚àÖ ‚àâ‚àÖ
d‚àâa   = ‚àâ‚à∑ d‚â¢a ‚àâ‚àÖ ‚àâ‚àÖ
a‚àâbc  = ‚àâ‚à∑ a‚â¢b a‚àâc b‚àâc
a‚àâcd  = ‚àâ‚à∑ a‚â¢c a‚àâd c‚àâd
b‚àâcd  = ‚àâ‚à∑ b‚â¢c b‚àâd c‚àâd
c‚àâab  = ‚àâ‚à∑ c‚â¢a c‚àâb a‚àâb
d‚àâab  = ‚àâ‚à∑ d‚â¢a d‚àâb a‚àâb
c‚àâba  = ‚àâ‚à∑ c‚â¢b c‚àâa b‚àâa
d‚àâba  = ‚àâ‚à∑ d‚â¢b d‚àâa b‚àâa
a‚àâbcd = ‚àâ‚à∑ a‚â¢b a‚àâcd b‚àâcd
d‚àâcab = ‚àâ‚à∑ d‚â¢c d‚àâab c‚àâab
d‚àâcba = ‚àâ‚à∑ d‚â¢c d‚àâba c‚àâba

[a] = ‚à∑ a‚àâ‚àÖ
[ab] = ‚à∑ a‚àâb
[ba] = ‚à∑ b‚àâa
[abc] = ‚à∑ a‚àâbc
[cab] = ‚à∑ c‚àâab
[cba] = ‚à∑ c‚àâba
[abcd] = ‚à∑ a‚àâbcd
[dcab] = ‚à∑ d‚àâcab
[dcba] = ‚à∑ d‚àâcba

{-
abcd ‚Üí dcab

permutation
  3 ‚à∑ (2 ‚à∑ (0 ‚à∑ []))
-}
import Prelude.Fin

perm‚ÇÄ : Permutation 0
perm‚ÇÄ = []

perm‚ÇÅ : Permutation 1
perm‚ÇÅ = zero ‚à∑‚Çö [] -- from‚Ñï 0 ‚à∑‚Çö []

perm‚ÇÇ : Permutation 2
perm‚ÇÇ = # 0 ‚à∑‚Çö # 0 ‚à∑‚Çö [] -- from‚Ñï 0 ‚à∑‚Çö []

perm : Permutation 4
perm = # 3 ‚à∑‚Çö # 2 ‚à∑‚Çö # 0 ‚à∑‚Çö # 0 ‚à∑‚Çö []

head : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L} ‚Üí ‚àÖ‚äÇ L ‚Üí ùê¥
head (‚àÖ‚äÇ‚à∑ {x‚ÇÄ} _) = x‚ÇÄ

tail : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L} ‚Üí ‚àÖ‚äÇ L ‚Üí ùïÉ ùê¥
tail (‚àÖ‚äÇ‚à∑ {x‚ÇÅs = x‚ÇÅs} _) = x‚ÇÅs

last : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L} ‚Üí ‚àÖ‚äÇ L ‚Üí ùê¥
last (‚àÖ‚äÇ‚à∑ {x‚ÇÄ} {‚àÖ} _) = x‚ÇÄ
last (‚àÖ‚äÇ‚à∑ {x‚ÇÅs = ‚à∑ x‚ÇÅ‚àâx‚ÇÇs} _) = last (‚àÖ‚äÇ‚à∑ x‚ÇÅ‚àâx‚ÇÇs)

last-thm‚ÇÅ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L : ùïÉ ùê¥} ‚Üí (‚àÖ‚äÇL : ‚àÖ‚äÇ L) ‚Üí L [ lastIndex ‚àÖ‚äÇL ]= last ‚àÖ‚äÇL
last-thm‚ÇÅ (‚àÖ‚äÇ‚à∑ ‚àâ‚àÖ) = here ‚àâ‚àÖ
last-thm‚ÇÅ (‚àÖ‚äÇ‚à∑ (‚àâ‚à∑ x x‚ÇÄ‚àâx‚ÇÅs‚ÇÅ x‚ÇÄ‚àâx‚ÇÅs)) = there (‚àâ‚à∑ x x‚ÇÄ‚àâx‚ÇÅs‚ÇÅ x‚ÇÄ‚àâx‚ÇÅs) (last-thm‚ÇÅ (‚àÖ‚äÇ‚à∑ x‚ÇÄ‚àâx‚ÇÅs))

tail‚àâ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {ùîû} {xs : ùïÉ ùê¥} (‚àÖ‚äÇxs : ‚àÖ‚äÇ xs) ‚Üí ùîû ‚àâ xs ‚Üí ùîû ‚àâ tail ‚àÖ‚äÇxs
tail‚àâ () ‚àâ‚àÖ
tail‚àâ (‚àÖ‚äÇ‚à∑ x) (‚àâ‚à∑ x‚ÇÅ ‚àâ‚àÖ .x) = ‚àâ‚àÖ
tail‚àâ (‚àÖ‚äÇ‚à∑ x) (‚àâ‚à∑ x‚ÇÉ (‚àâ‚à∑ x‚ÇÑ x‚ÇÖ x‚ÇÇ) .x) = ‚àâ‚à∑ x‚ÇÑ x‚ÇÖ x‚ÇÇ
{-
¬¨‚àà‚Üí‚àâ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {ùîû} {xs : ùïÉ ùê¥} ‚Üí (ùîû ‚àà xs ‚Üí ‚ä•) ‚Üí ùîû ‚àâ xs
¬¨‚àà‚Üí‚àâ {ùîû = ùîû} {xs = ‚àÖ} ¬¨ùîû‚ààxs = ‚àâ‚àÖ
¬¨‚àà‚Üí‚àâ {ùîû = ùîû} {xs = ‚à∑ {x‚ÇÄ} {x‚ÇÅs = ‚àÖ} x‚ÇÄ‚àâ‚àÖ} ¬¨ùîû‚ààxs = ‚àâ‚à∑ (Œª ùîû‚â°x‚ÇÄ ‚Üí ‚ä•-elim (¬¨ùîû‚ààxs (subst (_‚àà ‚à∑ _) (sym ùîû‚â°x‚ÇÄ) (here _)))) ‚àâ‚àÖ x‚ÇÄ‚àâ‚àÖ
¬¨‚àà‚Üí‚àâ {xs = ‚à∑ (‚àâ‚à∑ x ‚àâ‚àÖ ‚àâ‚àÖ)} ¬¨ùîû‚ààxs = {!!}
¬¨‚àà‚Üí‚àâ {xs = ‚à∑ (‚àâ‚à∑ x‚ÇÑ (‚àâ‚à∑ x‚ÇÖ x‚ÇÄ‚àâx‚ÇÅ‚àâx‚ÇÇs .x) (‚àâ‚à∑ x‚ÇÇ x‚ÇÅ‚àâx‚ÇÇs x))} ¬¨ùîû‚ààxs = {!!}

¬¨‚àà‚Üí‚àâ'' : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚¶É _ : Eq ùê¥ ‚¶Ñ {ùîû} {xs : ùïÉ ùê¥} ‚Üí (ùîû ‚àà xs ‚Üí ‚ä•) ‚Üí ùîû ‚àâ xs
¬¨‚àà‚Üí‚àâ'' {ùîû = ùîû} {xs = ‚àÖ} ¬¨ùîû‚ààxs = ‚àâ‚àÖ
¬¨‚àà‚Üí‚àâ'' {ùîû = ùîû} {xs = ‚à∑ {x‚ÇÄ} {x‚ÇÅs = ‚àÖ} x‚ÇÄ‚àâ‚àÖ} ¬¨ùîû‚ààxs = ‚àâ‚à∑ (Œª ùîû‚â°x‚ÇÄ ‚Üí ‚ä•-elim (¬¨ùîû‚ààxs (subst (_‚àà ‚à∑ _) (sym ùîû‚â°x‚ÇÄ) (here _)))) ‚àâ‚àÖ x‚ÇÄ‚àâ‚àÖ
¬¨‚àà‚Üí‚àâ'' {ùîû = ùîû} {xs = ‚à∑ {x‚ÇÄ} {x‚ÇÅs = ‚à∑ {x‚ÇÅ} {x‚ÇÇs} x‚ÇÅ‚àâx‚ÇÇs} x‚ÇÄ‚àâx‚ÇÅ‚àâx‚ÇÇs} ¬¨ùîû‚ààxs with ùîû ‚âü x‚ÇÄ
... | yes ùîû‚â°x‚ÇÄ = ‚ä•-elim (¬¨ùîû‚ààxs (subst (_‚àà ‚à∑ x‚ÇÄ‚àâx‚ÇÅ‚àâx‚ÇÇs) (sym ùîû‚â°x‚ÇÄ) (here _)))
... | no ùîû‚â¢x‚ÇÄ = {!‚àâ‚Üí‚àà‚Üí‚ä• x‚ÇÄ‚àâx‚ÇÅ‚àâx‚ÇÇs!}

¬¨‚àà‚Üí‚àâ' : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {ùîû} {xs : ùïÉ ùê¥} ‚Üí (ùîû ‚àà xs ‚Üí ‚ä•) ‚Üí ùîû ‚àâ xs
¬¨‚àà‚Üí‚àâ' {ùîû = ùîû} {xs = ‚àÖ} ¬¨ùîû‚ààxs = ‚àâ‚àÖ
¬¨‚àà‚Üí‚àâ' {ùîû = ùîû} {xs = ‚à∑ {x‚ÇÄ} {x‚ÇÅs = ‚àÖ} x‚ÇÄ‚àâ‚àÖ} ¬¨ùîû‚ààxs = ‚àâ‚à∑ (Œª ùîû‚â°x‚ÇÄ ‚Üí ‚ä•-elim (¬¨ùîû‚ààxs (subst (_‚àà ‚à∑ _) (sym ùîû‚â°x‚ÇÄ) (here _)))) ‚àâ‚àÖ x‚ÇÄ‚àâ‚àÖ
¬¨‚àà‚Üí‚àâ' {ùîû = ùîû} {xs = ‚à∑ {x‚ÇÄ} {x‚ÇÅs = ‚à∑ {x‚ÇÅ} {x‚ÇÇs} x‚ÇÅ‚àâx‚ÇÇs} x‚ÇÄ‚àâx‚ÇÅ‚àâx‚ÇÇs} ¬¨ùîû‚ààxs = ‚àâ‚à∑ (Œª ùîû‚â°x‚ÇÄ ‚Üí ‚ä•-elim (¬¨ùîû‚ààxs ((subst (_‚àà ‚à∑ _) (sym ùîû‚â°x‚ÇÄ) (here _))))) (tail‚àâ (‚àÖ‚äÇ‚à∑ x‚ÇÄ‚àâx‚ÇÅ‚àâx‚ÇÇs) (‚àâ‚à∑ (Œª ùîû‚â°x‚ÇÄ ‚Üí ‚ä•-elim (¬¨ùîû‚ààxs (subst (_‚àà ‚à∑ _) (sym ùîû‚â°x‚ÇÄ) (here _)))) {!!} x‚ÇÄ‚àâx‚ÇÅ‚àâx‚ÇÇs)) x‚ÇÄ‚àâx‚ÇÅ‚àâx‚ÇÇs
-}
mutual
  init : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄs : ùïÉ ùê¥} (‚àÖ‚äÇx‚ÇÄs : ‚àÖ‚äÇ x‚ÇÄs) ‚Üí ùïÉ ùê¥
  init (‚àÖ‚äÇ‚à∑ ‚àâ‚àÖ) = ‚àÖ
  init (‚àÖ‚äÇ‚à∑ (‚àâ‚à∑ _ x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs)) = ‚à∑ (init‚àâ (‚àÖ‚äÇ‚à∑ _) (‚àâ‚à∑ _ x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs))

  init‚àâ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄ : ùê¥} {x‚ÇÅs : ùïÉ ùê¥} (‚àÖ‚äÇx‚ÇÅs : ‚àÖ‚äÇ x‚ÇÅs) ‚Üí x‚ÇÄ ‚àâ x‚ÇÅs ‚Üí x‚ÇÄ ‚àâ init ‚àÖ‚äÇx‚ÇÅs
  init‚àâ () ‚àâ‚àÖ
  init‚àâ (‚àÖ‚äÇ‚à∑ _) (‚àâ‚à∑ _ ‚àâ‚àÖ ‚àâ‚àÖ) = ‚àâ‚àÖ
  init‚àâ (‚àÖ‚äÇ‚à∑ _) (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÇ x‚ÇÄ‚àâx‚ÇÉs x‚ÇÇ‚àâx‚ÇÉs) (‚àâ‚à∑ x‚ÇÅ‚â¢x‚ÇÇ x‚ÇÅ‚àâx‚ÇÉs .x‚ÇÇ‚àâx‚ÇÉs)) = ‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ (init‚àâ _ (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÇ x‚ÇÄ‚àâx‚ÇÉs x‚ÇÇ‚àâx‚ÇÉs)) (init‚àâ _ (‚àâ‚à∑ x‚ÇÅ‚â¢x‚ÇÇ x‚ÇÅ‚àâx‚ÇÉs x‚ÇÇ‚àâx‚ÇÉs))

shiftRight : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {xs : ùïÉ ùê¥} (‚àÖ‚äÇxs : ‚àÖ‚äÇ xs) ‚Üí last ‚àÖ‚äÇxs ‚àâ init ‚àÖ‚äÇxs
shiftRight (‚àÖ‚äÇ‚à∑ ‚àâ‚àÖ) = ‚àâ‚àÖ
shiftRight (‚àÖ‚äÇ‚à∑ {x‚ÇÄ} (‚àâ‚à∑ {x‚ÇÅ} x‚ÇÄ‚â¢x‚ÇÅ {x‚ÇÇs} x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs)) =
  ‚àâ‚à∑ (let x‚ÇÅs[last]=lastx‚ÇÅs = last-thm‚ÇÅ (‚àÖ‚äÇ‚à∑ x‚ÇÅ‚àâx‚ÇÇs) in
          Œª lastx‚ÇÅs‚â°x‚ÇÄ ‚Üí
                       let x‚ÇÄ‚â°lastx‚ÇÅs = sym lastx‚ÇÅs‚â°x‚ÇÄ
                       in let x‚ÇÅs[last]=x‚ÇÄ = subst (‚à∑ x‚ÇÅ‚àâx‚ÇÇs [ lastIndex (‚àÖ‚äÇ‚à∑ x‚ÇÅ‚àâx‚ÇÇs) ]=_) lastx‚ÇÅs‚â°x‚ÇÄ x‚ÇÅs[last]=lastx‚ÇÅs --reright lastx‚ÇÅs‚â°x‚ÇÄ x‚ÇÅs[last]=lastx‚ÇÅs
                       in []=-thm‚ÇÄ x‚ÇÅs[last]=x‚ÇÄ (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs) )
     (shiftRight (‚àÖ‚äÇ‚à∑ x‚ÇÅ‚àâx‚ÇÇs))
     (init‚àâ (‚àÖ‚äÇ‚à∑ x‚ÇÅ‚àâx‚ÇÇs) (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs))

last-thm : last (‚àÖ‚äÇ‚à∑ a‚àâb) ‚â° ‚ãÜb
last-thm = refl

init-thm : init (‚àÖ‚äÇ‚à∑ a‚àâb) ‚â° [a]
init-thm = refl
{-
lemma : (bnotina : ‚ãÜb ‚àâ [a]) ‚Üí bnotina ‚â° b‚àâa
lemma (‚àâ‚à∑ x ‚àâ‚àÖ .‚àâ‚àÖ) = {!!}

sr-lem1 : ‚àÄ {eq : ‚ãÜb ‚â° ‚ãÜa} ‚Üí (t : Set) ‚Üí t ‚â° ‚ä• -- a‚â¢b (sym eq)
sr-lem1 = {!!}

sr-lem : ‚àÄ {eq} ‚Üí []=-thm‚ÇÄ (subst (_[_]=_ (‚à∑ ‚àâ‚àÖ) 0) eq (here ‚àâ‚àÖ)) (‚àâ‚à∑ a‚â¢b ‚àâ‚àÖ ‚àâ‚àÖ) ‚â° a‚â¢b (sym eq)
sr-lem {eq} = {!!}

sr-thm : shiftRight (‚àÖ‚äÇ‚à∑ a‚àâb) ‚â° b‚àâa
sr-thm = {!!}

sr-law : ùïÉ‚Üíùë≥ (‚à∑ (shiftRight (‚àÖ‚äÇ‚à∑ a‚àâb))) ‚â° ùïÉ‚Üíùë≥ (‚à∑ b‚àâa)
sr-law = {!refl!}
-}
{-
shiftRight‚àâ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {xs : ùïÉ ùê¥} (‚àÖ‚äÇxs : ‚àÖ‚äÇ xs) {ùîû : ùê¥} ‚Üí ùîû ‚àâ xs ‚Üí ùîû ‚àâ ‚à∑ (shiftRight ‚àÖ‚äÇxs)
shiftRight‚àâ (‚àÖ‚äÇ‚à∑ ‚àâ‚àÖ) (‚àâ‚à∑ ùîû‚â¢x‚ÇÄ ùîû‚àâx‚ÇÅs .‚àâ‚àÖ) = ‚àâ‚à∑ ùîû‚â¢x‚ÇÄ ùîû‚àâx‚ÇÅs ‚àâ‚àÖ
shiftRight‚àâ (‚àÖ‚äÇ‚à∑ (‚àâ‚à∑ x x‚ÇÄ‚àâx‚ÇÅs‚ÇÅ x‚ÇÄ‚àâx‚ÇÅs)) (‚àâ‚à∑ ùîû‚â¢x‚ÇÄ ùîû‚àâx‚ÇÅs .(‚àâ‚à∑ x x‚ÇÄ‚àâx‚ÇÅs‚ÇÅ x‚ÇÄ‚àâx‚ÇÅs)) = {!!}
-}
rotateRight : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
rotateRight ‚àÖ = ‚àÖ
rotateRight (‚à∑ {x‚ÇÄ} ‚àâ‚àÖ) = ‚à∑ {x‚ÇÄ = x‚ÇÄ} ‚àâ‚àÖ
rotateRight (‚à∑ x‚ÇÄ‚àâx‚ÇÅs) = ‚à∑ (shiftRight (‚àÖ‚äÇ‚à∑ x‚ÇÄ‚àâx‚ÇÅs))


transpose-1st-two : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄ : ùê¥} {x‚ÇÅs : ùïÉ ùê¥} (‚àÖ‚äÇx‚ÇÅs : ‚àÖ‚äÇ x‚ÇÅs) (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) ‚Üí ùïÉ ùê¥
transpose-1st-two (‚àÖ‚äÇ‚à∑ x‚ÇÅ‚àâx‚ÇÇs) (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs .x‚ÇÅ‚àâx‚ÇÇs) = ‚à∑ (‚àâ‚à∑ ((sym' x‚ÇÄ‚â¢x‚ÇÅ)) x‚ÇÅ‚àâx‚ÇÇs x‚ÇÄ‚àâx‚ÇÇs)

transposeFirst : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
transposeFirst ‚àÖ = ‚àÖ
transposeFirst (‚à∑ {x‚ÇÄ} ‚àâ‚àÖ) = ‚à∑ {x‚ÇÄ = x‚ÇÄ} ‚àâ‚àÖ
transposeFirst (‚à∑ {x‚ÇÄ} (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs)) = ‚à∑ (‚àâ‚à∑ (sym' x‚ÇÄ‚â¢x‚ÇÅ) x‚ÇÅ‚àâx‚ÇÇs x‚ÇÄ‚àâx‚ÇÇs)

rotateRightBy : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
rotateRightBy 0 x = x
rotateRightBy (suc n) x = rotateRightBy n (rotateRight x)

moveNthFromEndLeft : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
moveNthFromEndLeft _ ‚àÖ = ‚àÖ
moveNthFromEndLeft _ (‚à∑ {x‚ÇÄ} ‚àâ‚àÖ) = ‚à∑ {x‚ÇÄ = x‚ÇÄ} ‚àâ‚àÖ
moveNthFromEndLeft n xs = rotateRightBy (length xs - 2 - n) (transposeFirst (rotateRightBy (2 + n) xs))

moveEndLeftBy : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
moveEndLeftBy _ ‚àÖ = ‚àÖ
moveEndLeftBy _ (‚à∑ {x‚ÇÄ} ‚àâ‚àÖ) = ‚à∑ {x‚ÇÄ = x‚ÇÄ} ‚àâ‚àÖ
moveEndLeftBy 0 xs = xs
moveEndLeftBy (suc n) xs = moveNthFromEndLeft n (moveEndLeftBy n xs)

moveNthFromBeginningLeftBy : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
moveNthFromBeginningLeftBy _ 0 xs = xs
moveNthFromBeginningLeftBy n m xs with length xs
... | l with suc n ‚âü l
... | yes _ =                       (moveEndLeftBy m (                           xs))
... | no _  = rotateRightBy (suc n) (moveEndLeftBy m (rotateRightBy (l -(suc n)) xs))

-- bacd
-- bcad
-- 2 1
--

-- bacd rotateRight 1
-- dbac
-- dbca
-- bcad


-- bacd rotateRight 3
-- acdb
-- acbd
-- dacb

open import Agda.Builtin.List

permToList : ‚àÄ {n} ‚Üí Permutation n ‚Üí List ‚Ñï
permToList [] = []
permToList (x ‚à∑‚Çö x‚ÇÅ) = _‚à∑_ (to‚Ñï x) (permToList x‚ÇÅ)

reorder : ‚àÄ {ùë®} {ùê¥ : Set ùë®} (L : ùïÉ ùê¥) ‚Üí Permutation (length L) ‚Üí ùïÉ ùê¥
reorder xs perm = go 0 (permToList perm) xs where
  go : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí (n : ‚Ñï) ‚Üí List ‚Ñï ‚Üí (L : ùïÉ ùê¥) ‚Üí ùïÉ ùê¥
  go _ _ ‚àÖ = ‚àÖ
  go _ [] xs = xs
  go n (p‚ÇÄ ‚à∑‚Çó ps) xs = go (suc n) ps (moveNthFromBeginningLeftBy (n + p‚ÇÄ) p‚ÇÄ xs)

-- abcd 0 1100
-- bacd 1 100
-- bcad 2 00
-- bcad 3 0
-- bcad 4

rotate-thm : ùïÉ‚Üíùë≥ (rotateRight [ab]) ‚â° ùïÉ‚Üíùë≥ [ba] -- reorder [abcd] perm ‚â° [dcab]
rotate-thm = refl

reorder-thm‚ÇÇ : ùïÉ‚Üíùë≥ (reorder [ab] (# 1 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ [ba]
reorder-thm‚ÇÇ = refl

reorder-thm‚ÇÉ' : ùïÉ‚Üíùë≥ (reorder [abc] (# 2 ‚à∑‚Çö # 0 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ [cab]
reorder-thm‚ÇÉ' = refl

reversePerm : ‚àÄ {n : ‚Ñï} ‚Üí Permutation n
reversePerm {0} = []
reversePerm {suc n} = from‚Ñï n ‚à∑‚Çö reversePerm

reverse : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
reverse x = reorder x reversePerm









--reorder-thm‚ÇÉ : ùïÉ‚Üíùë≥ (reorder [abc] (# 2 ‚à∑‚Çö # 1 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ [cba]
--reorder-thm‚ÇÉ = refl

reorder-thm‚ÇÑ : ùïÉ‚Üíùë≥ (reorder [abcd] (# 3 ‚à∑‚Çö # 2 ‚à∑‚Çö # 1 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ [dcba]
reorder-thm‚ÇÑ = refl



--reverse-thm‚ÇÉ : ùïÉ‚Üíùë≥ (reorder [abc] (# 2 ‚à∑‚Çö # 1 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ (reverse [abc])
--reverse-thm‚ÇÉ = refl

--reverse-thm‚ÇÑ : ùïÉ‚Üíùë≥ (reorder [abcd] (# 3 ‚à∑‚Çö # 2 ‚à∑‚Çö # 1 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ (reverse [abcd])
--reverse-thm‚ÇÑ = refl



















-- {-
-- reverse-thm‚ÇÅ : ùïÉ‚Üíùë≥ (reorder [ab] (# 1 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ (reverse [ab])
-- reverse-thm‚ÇÅ = {!refl!}
-- -}
-- {-
-- reverse-thm‚ÇÇ : ùïÉ‚Üíùë≥ (reorder [abc] (# 2 ‚à∑‚Çö # 1 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ (reverse [abc])
-- reverse-thm‚ÇÇ = {!refl!}
-- -}
-- {-
-- reverse-thm : ùïÉ‚Üíùë≥ (reorder [abcd] (# 3 ‚à∑‚Çö # 2 ‚à∑‚Çö # 1 ‚à∑‚Çö # 0 ‚à∑‚Çö [])) ‚â° ùïÉ‚Üíùë≥ (reverse [abcd])
-- reverse-thm = refl
-- -}

-- open import Data.Nat.Base
-- open import Relation.Nullary renaming (Dec to DEC; yes to YES; no to NO)


-- {-
-- reversePerm : ‚àÄ {n} ‚Üí Permutation n
-- reversePerm {0} = []
-- reversePerm {suc 0} = (# 0) ‚à∑‚Çö reversePerm
-- reversePerm {suc (suc n)} = (#_ ((suc n)) {n = suc (suc n)} {m<n = {!!}}) ‚à∑‚Çö reversePerm
-- -- Goal: Relation.Nullary.Decidable.True
-- --       (suc (suc n) .Data.Nat.Base.‚â§? suc (suc n)
-- --        | (suc n .Data.Nat.Base.‚â§? suc n | n .Data.Nat.Base.‚â§? n))
-- -}
-- {-
-- perminv : Set
-- perminv = {!reversePerm {4}!}
-- -}
-- -- bca
-- -- cab
-- -- bcda
-- -- dabc

-- data ‚åú_‚à©_‚â°‚àÖ‚åù {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí ùïÉ ùê¥ ‚Üí Set ùë® where
--   Œµ : ‚àÄ {y‚ÇÄs} ‚Üí ‚åú ‚àÖ ‚à© y‚ÇÄs ‚â°‚àÖ‚åù
--   œÜ : ‚àÄ {x‚ÇÄs y‚ÇÄs} ‚Üí (‚àÖ‚äÇx‚ÇÄs : ‚àÖ‚äÇ x‚ÇÄs) ‚Üí (x‚ÇÄ‚àây‚ÇÄs : head ‚àÖ‚äÇx‚ÇÄs ‚àâ y‚ÇÄs) ‚Üí  ‚åú tail ‚àÖ‚äÇx‚ÇÄs ‚à© ‚à∑ x‚ÇÄ‚àây‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù

-- take : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
-- take 0 _ = ‚àÖ
-- take (suc n) ‚àÖ = ‚àÖ
-- take (suc n) (‚à∑ {x‚ÇÅs = ‚àÖ} x‚ÇÄ‚àâ‚àÖ) = ‚àÖ
-- take (suc n) (‚à∑ {x‚ÇÄ} {x‚ÇÅs = ‚à∑ x‚ÇÅ‚àâx‚ÇÇs} x‚ÇÄ‚àâx‚ÇÅs) = ‚à∑ (init‚àâ (‚àÖ‚äÇ‚à∑ (x‚ÇÅ‚àâx‚ÇÇs)) x‚ÇÄ‚àâx‚ÇÅs)

-- mutual
--   append : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {ùîû : ùê¥} {xs : ùïÉ ùê¥} (ùîû‚àâxs : ùîû ‚àâ xs) ‚Üí ùïÉ ùê¥
--   append {ùîû = ùîû} {‚àÖ} ‚àâ‚àÖ = ‚à∑ {x‚ÇÄ = ùîû} ‚àâ‚àÖ
--   append {ùîû = ùîû} {‚à∑ {x‚ÇÄ} x‚ÇÄ‚àâx‚ÇÅs} (‚àâ‚à∑ ùîû‚â¢x‚ÇÄ {x‚ÇÅs} ùîû‚àâx‚ÇÅs .x‚ÇÄ‚àâx‚ÇÅs) = ‚à∑ {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅs = append ùîû‚àâx‚ÇÅs} (append‚àâ ùîû‚â¢x‚ÇÄ ùîû‚àâx‚ÇÅs x‚ÇÄ‚àâx‚ÇÅs)

--   append‚àâ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {ùîû x‚ÇÄ : ùê¥} (ùîû‚â¢x‚ÇÄ : ùîû ‚â¢ x‚ÇÄ) {x‚ÇÅs : ùïÉ ùê¥} (ùîû‚àâx‚ÇÅs : ùîû ‚àâ x‚ÇÅs) (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) ‚Üí x‚ÇÄ ‚àâ append ùîû‚àâx‚ÇÅs
--   append‚àâ ùîû‚â¢x‚ÇÄ ‚àâ‚àÖ ‚àâ‚àÖ = ‚àâ‚à∑ (Œª x‚ÇÄ‚â¢ùîû ‚Üí ùîû‚â¢x‚ÇÄ (sym x‚ÇÄ‚â¢ùîû)) ‚àâ‚àÖ ‚àâ‚àÖ
--   append‚àâ ùîû‚â¢x‚ÇÄ (‚àâ‚à∑ ùîû‚â¢x‚ÇÅ ùîû‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs) (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs .x‚ÇÅ‚àâx‚ÇÇs) = ‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ (append‚àâ ùîû‚â¢x‚ÇÄ ùîû‚àâx‚ÇÇs x‚ÇÄ‚àâx‚ÇÇs) (append‚àâ ùîû‚â¢x‚ÇÅ ùîû‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs)
-- {-
-- mutual
--   reverse : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
--   reverse ‚àÖ = ‚àÖ
--   reverse (‚à∑ {x‚ÇÅs = ‚àÖ} x‚ÇÄ‚àâ‚àÖ) = ‚à∑ x‚ÇÄ‚àâ‚àÖ
--   reverse (‚à∑ {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅs = ‚à∑ x‚ÇÅ‚àâx‚ÇÇs} x‚ÇÄ‚àâx‚ÇÅs) = append (reverse‚àâ x‚ÇÄ‚àâx‚ÇÅs) -- {!shiftRight (reverse tail (‚àÖ‚äÇ‚à∑ x‚ÇÄ‚àâx‚ÇÅs)!} --

--   reverse‚àâ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {ùîû : ùê¥} {xs : ùïÉ ùê¥} (ùîû‚àâxs : ùîû ‚àâ xs) ‚Üí ùîû ‚àâ reverse xs
--   reverse‚àâ ‚àâ‚àÖ = ‚àâ‚àÖ
--   reverse‚àâ (‚àâ‚à∑ x ‚àâ‚àÖ ‚àâ‚àÖ) = ‚àâ‚à∑ x ‚àâ‚àÖ ‚àâ‚àÖ
--   reverse‚àâ (‚àâ‚à∑ x‚ÇÇ (‚àâ‚à∑ x‚ÇÉ ‚àâ‚àÖ ‚àâ‚àÖ) (‚àâ‚à∑ x ‚àâ‚àÖ .‚àâ‚àÖ)) = ‚àâ‚à∑ x‚ÇÉ (‚àâ‚à∑ x‚ÇÇ ‚àâ‚àÖ ‚àâ‚àÖ) (‚àâ‚à∑ (Œª z ‚Üí x (sym z)) ‚àâ‚àÖ ‚àâ‚àÖ)
--   reverse‚àâ (‚àâ‚à∑ x‚ÇÉ (‚àâ‚à∑ x‚ÇÑ (‚àâ‚à∑ x‚ÇÖ ùîû‚àâxs‚ÇÉ ùîû‚àâxs‚ÇÇ) ùîû‚àâxs) (‚àâ‚à∑ x ùîû‚àâxs‚ÇÅ .ùîû‚àâxs)) = {!ùîû‚àâxs‚ÇÉ!}
-- {-
--   reverse‚àâ ‚àâ‚àÖ = ‚àâ‚àÖ
--   reverse‚àâ (‚àâ‚à∑ x ùîû‚àâxs‚ÇÅ ‚àâ‚àÖ) = ‚àâ‚à∑ x ùîû‚àâxs‚ÇÅ ‚àâ‚àÖ
--   reverse‚àâ {ùîû = ùîû} (‚àâ‚à∑ {x‚ÇÄ} ùîû‚â¢x‚ÇÄ (‚àâ‚à∑ {x‚ÇÅ} ùîû‚â¢x‚ÇÅ ùîû‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs) (‚àâ‚à∑ {.x‚ÇÅ} x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs .x‚ÇÅ‚àâx‚ÇÇs)) = {!!}
-- -}
-- -}

-- {-

-- shiftLeft abcd ‚Üí b‚àâcda

-- abcd ‚Üí d‚àâabc

-- abc ‚Üí c‚àâab

-- ab ‚Üí b‚àâa


-- bcda

-- dabc

-- abcd

-- cba

-- adcb


-- adcb

-- equivalent bcd dcb ‚Üí x ‚àâ bcd ‚Üí x ‚àâ dcb

-- reverse‚àâ :

-- shiftRight‚àâ : a ‚àâ bcd ‚Üí d ‚àâ abc

-- shiftRight‚àâ b‚àâc = c‚àâb

-- shiftRight‚àâ a‚àâbc = c‚àâba

-- abc
-- a‚àâbc
-- c‚àâab



-- c‚àâba

-- d‚àâabc : last abcd ‚àâ init abcd
-- dabc : ‚à∑ d‚àâabc

-- a ‚àâ bcd

-- ‚à∑ d‚àâbc



-- ‚àÄ {ùë®} {ùê¥ : Set ùë®} {a : ùê¥} {bcd : ùïÉ ùê¥} (a‚àâbcd : a ‚àâ bcd) (a‚àâcb : a ‚àâ (reverse (init bcd))) ‚Üí last bcd ‚àâ append a‚àâcb

-- ‚àÄ {ùë®} {ùê¥ : Set ùë®} {a : ùê¥} {bcd : ùïÉ ùê¥} (a‚àâbcd : a ‚àâ bcd) ‚Üí (a‚àâcb : a ‚àâ (reverse (init bcd)))

-- shiftRight ab = b‚àâa
-- ‚à∑ (shiftRight ab) = ba

-- ‚à∑ (shiftRight bc) = cb

-- shiftRight bc = c‚àâb



-- shiftRight abc = c‚àâab

-- shiftRight abcd = d‚àâabc

-- d‚àâabc      = ‚àâ‚à∑ {a} d‚â¢a {bc} d‚àâbc a‚àâbc

-- bc = ‚à∑ {b} {c} b‚àâc
-- a  = ‚à∑ {a} {‚àÖ} a‚àâ‚àÖ

-- d‚àâbc = ‚àâ‚à∑ {b} d‚â¢b {c} d‚àâc b‚àâc
-- a‚àâbc = ‚àâ‚à∑ {b} a‚â¢b {c} a‚àâc b‚àâc



-- abcd       = ‚à∑ {a} {bcd} a‚àâbcd
-- bcd        = ‚à∑ {b} {cd}  b‚àâcd
-- cd         = ‚à∑ {c} {d}   c‚àâd
-- d          = ‚à∑ {d} {‚àÖ}   d‚àâ‚àÖ

-- a‚àâbcd       = ‚àâ‚à∑ {b} a‚â¢b {cd} a‚àâcd b‚àâcd

-- a‚àâcd       = ‚àâ‚à∑ {c} a‚â¢c {d} a‚àâd c‚àâd
-- b‚àâcd       = ‚àâ‚à∑ {c} b‚â¢c {d} b‚àâd c‚àâd

-- a‚àâd        = ‚àâ‚à∑ [d} a‚â¢d {‚àÖ} a‚àâ‚àÖ d‚àâ‚àÖ
-- b‚àâd        = ‚àâ‚à∑ {d} b‚â¢d {‚àÖ} b‚àâ‚àÖ d‚àâ‚àÖ
-- c‚àâd        = ‚àâ‚à∑ {d} c‚â¢d {‚àÖ} c‚àâ‚àÖ d‚àâ‚àÖ

-- a‚àâ‚àÖ        = ‚àâ‚àÖ
-- b‚àâ‚àÖ        = ‚àâ‚àÖ
-- c‚àâ‚àÖ        = ‚àâ‚àÖ
-- d‚àâ‚àÖ        = ‚àâ‚àÖ




-- dcba       = ‚à∑ {d} {cba} d‚àâcba
-- cba        = ‚à∑ {c} {ba}  c‚àâba
-- ba         = ‚à∑ {b} {a}   b‚àâa
-- a          = ‚à∑ {a} {‚àÖ}   a‚àâ‚àÖ

-- d‚àâcba      = ‚àâ‚à∑ {c} d‚â¢c {ba} d‚àâba c‚àâba

-- d‚àâba       = ‚àâ‚à∑ {b} d‚â¢b {a} d‚àâa b‚àâa
-- c‚àâba       = ‚àâ‚à∑ {b} c‚â¢b {a} c‚àâa b‚àâa

-- d‚àâa        = ‚àâ‚à∑ [a} d‚â¢a {‚àÖ} d‚àâ‚àÖ a‚àâ‚àÖ
-- c‚àâa        = ‚àâ‚à∑ {a} c‚â¢a {‚àÖ} c‚àâ‚àÖ a‚àâ‚àÖ
-- b‚àâa        = ‚àâ‚à∑ {a} b‚â¢a {‚àÖ} b‚àâ‚àÖ a‚àâ‚àÖ

-- d‚àâ‚àÖ        = ‚àâ‚àÖ
-- c‚àâ‚àÖ        = ‚àâ‚àÖ
-- b‚àâ‚àÖ        = ‚àâ‚àÖ
-- a‚àâ‚àÖ        = ‚àâ‚àÖ










-- a          = ‚à∑ {a} {‚àÖ} a‚àâ‚àÖ
-- ba         = ‚à∑ {b} {a} b‚àâa
-- cba        = ‚à∑ {c} {ba} c‚àâba

-- c‚àâba       = ‚àâ‚à∑ {b} c‚â¢b {a} c‚àâa b‚àâa

-- c‚àâa        = ‚àâ‚à∑ {a} c‚â¢a {‚àÖ} c‚àâ‚àÖ a‚àâ‚àÖ
-- b‚àâa        = ‚àâ‚à∑ {a} b‚â¢a {‚àÖ} b‚àâ‚àÖ a‚àâ‚àÖ

-- a‚àâ‚àÖ        = ‚àâ‚àÖ
-- b‚àâ‚àÖ        = ‚àâ‚àÖ
-- c‚àâ‚àÖ        = ‚àâ‚àÖ













-- abc        = ‚à∑ {a} {bc} a‚àâbc
-- bc         = ‚à∑ {b} {c} b‚àâc
-- c          = ‚à∑ {c} {‚àÖ} c‚àâ‚àÖ

-- a‚àâbc       = ‚àâ‚à∑ {b} a‚â¢b {c} a‚àâc b‚àâc

-- b‚àâc        = ‚àâ‚à∑ {c} b‚â¢c {‚àÖ} b‚àâ‚àÖ c‚àâ‚àÖ
-- a‚àâc        = ‚àâ‚à∑ [c} a‚â¢c {‚àÖ} a‚àâ‚àÖ c‚àâ‚àÖ

-- a‚àâ‚àÖ        = ‚àâ‚àÖ
-- b‚àâ‚àÖ        = ‚àâ‚àÖ
-- c‚àâ‚àÖ        = ‚àâ‚àÖ


-- a          = ‚à∑ {a} {‚àÖ} a‚àâ‚àÖ
-- ba         = ‚à∑ {b} {a} b‚àâa
-- cba        = ‚à∑ {c} {ba} c‚àâba

-- c‚àâba       = ‚àâ‚à∑ {b} c‚â¢b {a} c‚àâa b‚àâa

-- c‚àâa        = ‚àâ‚à∑ {a} c‚â¢a {‚àÖ} c‚àâ‚àÖ a‚àâ‚àÖ
-- b‚àâa        = ‚àâ‚à∑ {a} b‚â¢a {‚àÖ} b‚àâ‚àÖ a‚àâ‚àÖ

-- a‚àâ‚àÖ        = ‚àâ‚àÖ
-- b‚àâ‚àÖ        = ‚àâ‚àÖ
-- c‚àâ‚àÖ        = ‚àâ‚àÖ

-- data ùïÉ {ùë®} (ùê¥ : Set ùë®) where
--   ‚àÖ : ùïÉ ùê¥
--   ‚à∑ : {x‚ÇÄ : ùê¥} ‚Üí {x‚ÇÅs : ùïÉ ùê¥} ‚Üí x‚ÇÄ ‚àâ x‚ÇÅs ‚Üí ùïÉ ùê¥

-- data _‚àâ_ {ùë®} {ùê¥ : Set ùë®} (ùîû : ùê¥) where
--   ‚àâ‚àÖ : ùîû ‚àâ ‚àÖ
--   ‚àâ‚à∑ : ‚àÄ {x‚ÇÄ} ‚Üí ùîû ‚â¢ x‚ÇÄ ‚Üí ‚àÄ {x‚ÇÅs} ‚Üí ùîû ‚àâ x‚ÇÅs ‚Üí (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) ‚Üí ùîû ‚àâ (‚à∑ x‚ÇÄ‚àâx‚ÇÅs)
-- -}


-- -- ‚à™ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄs y‚ÇÄs} ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ùïÉ ùê¥
-- -- ‚à™ = {!!} where
-- --   ‚à™ ≥ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄs y‚ÇÄs} ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ùïÉ ùê¥
-- --   ‚à™ ≥ (Œµ {y‚ÇÄs}) = y‚ÇÄs
-- --   ‚à™ ≥ (œÜ {x‚ÇÄs} {y‚ÇÄs} ‚àÖ‚äÇx‚ÇÄs x‚ÇÄ‚àây‚ÇÄs x‚ÇÅs‚à©x‚ÇÄy‚ÇÄs‚â°‚àÖ) = ‚à™ ≥ x‚ÇÅs‚à©x‚ÇÄy‚ÇÄs‚â°‚àÖ


-- -- -- data ‚åú_‚à©_‚â°‚àÖ‚åù {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí ùïÉ ùê¥ ‚Üí Set ùë® where
-- -- --   ‚àÖ‚à©‚ãÜ : ‚àÄ {y‚ÇÄs} ‚Üí ‚åú ‚àÖ ‚à© y‚ÇÄs ‚â°‚àÖ‚åù
-- -- --   ‚ãÜ‚à©‚àÖ : ‚àÄ {x‚ÇÄs} ‚Üí ‚åú x‚ÇÄs ‚à© ‚àÖ ‚â°‚àÖ‚åù
-- -- --   ‚Üê‚à©‚Üê : ‚àÄ {x‚ÇÄs y‚ÇÄs} ‚Üí (‚àÖ‚äÇx‚ÇÄs : ‚àÖ‚äÇ x‚ÇÄs) ‚Üí (x‚ÇÄ‚àây‚ÇÄs : head ‚àÖ‚äÇx‚ÇÄs ‚àâ y‚ÇÄs) ‚Üí  ‚åú tail ‚àÖ‚äÇx‚ÇÄs ‚à© ‚à∑ x‚ÇÄ‚àây‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù
-- -- --   ‚Üí‚à©‚Üí : ‚àÄ {x‚ÇÄs y‚ÇÄs} ‚Üí (‚àÖ‚äÇy‚ÇÄs : ‚àÖ‚äÇ y‚ÇÄs) ‚Üí (y‚ÇÄ‚àâx‚ÇÄs : head ‚àÖ‚äÇy‚ÇÄs ‚àâ x‚ÇÄs) ‚Üí  ‚åú ‚à∑ y‚ÇÄ‚àâx‚ÇÄs ‚à© tail ‚àÖ‚äÇy‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù

-- -- -- ‚à©-assoc : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí {x y : ùïÉ ùê¥} ‚Üí ‚åú x ‚à© y ‚â°‚àÖ‚åù ‚Üí ‚åú y ‚à© x ‚â°‚àÖ‚åù
-- -- -- ‚à©-assoc ‚àÖ‚à©‚ãÜ = ‚ãÜ‚à©‚àÖ
-- -- -- ‚à©-assoc ‚ãÜ‚à©‚àÖ = ‚àÖ‚à©‚ãÜ
-- -- -- ‚à©-assoc (‚Üê‚à©‚Üê ‚àÖ‚äÇx‚ÇÄs x‚ÇÄ‚àây‚ÇÄs x‚ÇÅ) = ‚Üí‚à©‚Üí ‚àÖ‚äÇx‚ÇÄs x‚ÇÄ‚àây‚ÇÄs (‚à©-assoc x‚ÇÅ)
-- -- -- ‚à©-assoc (‚Üí‚à©‚Üí ‚àÖ‚äÇy‚ÇÄs y‚ÇÄ‚àâx‚ÇÄs x‚ÇÅ) = ‚Üê‚à©‚Üê ‚àÖ‚äÇy‚ÇÄs y‚ÇÄ‚àâx‚ÇÄs (‚à©-assoc x‚ÇÅ)

-- -- -- ‚à™ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄs y‚ÇÄs : ùïÉ ùê¥} ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ùïÉ ùê¥
-- -- -- ‚à™ (‚àÖ‚à©‚ãÜ {y‚ÇÄs}) = y‚ÇÄs
-- -- -- ‚à™ (‚ãÜ‚à©‚àÖ {x‚ÇÄs}) = x‚ÇÄs
-- -- -- ‚à™ (‚Üê‚à©‚Üê ‚àÖ‚äÇx‚ÇÄs x‚ÇÄ‚àây‚ÇÄs x) = ‚à™ x
-- -- -- ‚à™ (‚Üí‚à©‚Üí ‚àÖ‚äÇy‚ÇÄs y‚ÇÄ‚àâx‚ÇÄs x) = ‚à™ x

-- -- -- make-‚àÖ‚à©‚ãÜ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} (‚ãÜ : ùïÉ ùê¥) ‚Üí ‚åú ‚àÖ ‚à© ‚ãÜ ‚â°‚àÖ‚åù
-- -- -- make-‚àÖ‚à©‚ãÜ ‚ãÜ = ‚àÖ‚à©‚ãÜ {y‚ÇÄs = ‚ãÜ}

-- -- -- make-‚ãÜ‚à©‚àÖ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} (‚ãÜ : ùïÉ ùê¥) ‚Üí ‚åú ‚ãÜ ‚à© ‚àÖ ‚â°‚àÖ‚åù
-- -- -- make-‚ãÜ‚à©‚àÖ ‚ãÜ = ‚ãÜ‚à©‚àÖ {x‚ÇÄs = ‚ãÜ}

-- -- -- reverse : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí {‚ãÜ : ùïÉ ùê¥} ‚Üí ‚åú ‚àÖ ‚à© ‚ãÜ ‚â°‚àÖ‚åù ‚Üí ‚åú ‚ãÜ ‚à© ‚àÖ ‚â°‚àÖ‚åù
-- -- -- reverse ‚àÖ‚à©‚ãÜ = ‚ãÜ‚à©‚àÖ
-- -- -- reverse ‚ãÜ‚à©‚àÖ = ‚àÖ‚à©‚ãÜ
-- -- -- reverse (‚Üê‚à©‚Üê ‚àÖ‚äÇx‚ÇÄs x‚ÇÄ‚àây‚ÇÄs x) = ‚ãÜ‚à©‚àÖ
-- -- -- reverse (‚Üí‚à©‚Üí ‚àÖ‚äÇy‚ÇÄs y‚ÇÄ‚àâx‚ÇÄs x) = ‚ãÜ‚à©‚àÖ

-- -- -- -- data ‚åú_‚à©_‚â°‚àÖ‚åù {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí ùïÉ ùê¥ ‚Üí Set ùë® where
-- -- -- --   Œµ : ‚àÄ {y‚ÇÄs} ‚Üí ‚åú ‚àÖ ‚à© y‚ÇÄs ‚â°‚àÖ‚åù
-- -- -- --   œÜ : ‚àÄ {x‚ÇÄs y‚ÇÄs} ‚Üí (‚àÖ‚äÇx‚ÇÄs : ‚àÖ‚äÇ x‚ÇÄs) ‚Üí (x‚ÇÄ‚àây‚ÇÄs : head ‚àÖ‚äÇx‚ÇÄs ‚àâ y‚ÇÄs) ‚Üí  ‚åú tail ‚àÖ‚äÇx‚ÇÄs ‚à© ‚à∑ x‚ÇÄ‚àây‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù
-- -- -- -- -- œÜ (abc ‚à© def) ‚Üí dabc ‚à© ef

-- -- -- -- -- œÜ (bc ‚à© adef)  ‚Üí abc ‚à© def
-- -- -- -- -- œÜ (c ‚à© badef)  ‚Üí bc ‚à© adef
-- -- -- -- -- œÜ (‚àÖ ‚à© cbadef) ‚Üí c ‚à© badef
-- -- -- -- -- Œµ              ‚Üí ‚àÖ ‚à© cbadef

-- -- -- -- data ‚åú_‚à©‚Ä≤_‚â°‚àÖ‚åù {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí ùïÉ ùê¥ ‚Üí Set ùë® where
-- -- -- --   Œµ : ‚àÄ {x‚ÇÄs} ‚Üí ‚åú x‚ÇÄs ‚à©‚Ä≤ ‚àÖ ‚â°‚àÖ‚åù
-- -- -- --   œÜ : ‚àÄ {x‚ÇÄs y‚ÇÄs} ‚Üí (‚àÖ‚äÇy‚ÇÄs : ‚àÖ‚äÇ y‚ÇÄs) ‚Üí (y‚ÇÄ‚àâx‚ÇÄs : head ‚àÖ‚äÇy‚ÇÄs ‚àâ x‚ÇÄs) ‚Üí  ‚åú ‚à∑ y‚ÇÄ‚àâx‚ÇÄs ‚à©‚Ä≤ tail ‚àÖ‚äÇy‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ‚åú x‚ÇÄs ‚à©‚Ä≤ y‚ÇÄs ‚â°‚àÖ‚åù
-- -- -- -- -- œÜ (abc ‚à© def) ‚Üí bc ‚à© adef

-- -- -- -- -- œÜ (dabc ‚à© ef)  ‚Üí abc ‚à© def
-- -- -- -- -- œÜ (edabc ‚à© f)  ‚Üí dabc ‚à© ef
-- -- -- -- -- œÜ (fedabc ‚à© ‚àÖ) ‚Üí edabc ‚à© f
-- -- -- -- -- Œµ              ‚Üí fedabc ‚à© ‚àÖ

-- -- -- -- head' : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄ} {x‚ÇÅs : ùïÉ ùê¥} ‚Üí x‚ÇÄ ‚àâ x‚ÇÅs ‚Üí ‚åú x‚ÇÅs ‚à© ‚à∑ {x‚ÇÄ = x‚ÇÄ} ‚àâ‚àÖ ‚â°‚àÖ‚åù
-- -- -- -- head' ‚àâ‚àÖ = Œµ
-- -- -- -- head' {x‚ÇÄ = x‚ÇÄ} (‚àâ‚à∑ {x‚ÇÅ} x‚ÇÄ‚â¢x‚ÇÅ {x‚ÇÇs} x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs) = œÜ (‚àÖ‚äÇ‚à∑ x‚ÇÅ‚àâx‚ÇÇs) (‚àâ‚à∑ (Œª x‚ÇÅ‚â°x‚ÇÄ ‚Üí x‚ÇÄ‚â¢x‚ÇÅ (sym x‚ÇÅ‚â°x‚ÇÄ)) ‚àâ‚àÖ ‚àâ‚àÖ) {!head' x‚ÇÄ‚àâx‚ÇÇs!}

-- -- -- -- mutual
-- -- -- --   ‚à©‚Ä≤‚Üí‚à© : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí {x y : ùïÉ ùê¥} ‚Üí ‚åú x ‚à©‚Ä≤ y ‚â°‚àÖ‚åù ‚Üí ‚åú x ‚à© y ‚â°‚àÖ‚åù
-- -- -- --   ‚à©‚Ä≤‚Üí‚à© {x = ‚àÖ} Œµ = Œµ
-- -- -- --   ‚à©‚Ä≤‚Üí‚à© {x = ‚à∑ {x‚ÇÄ} {x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs} Œµ = œÜ (‚àÖ‚äÇ‚à∑ x‚ÇÄ‚àâx‚ÇÅs) ‚àâ‚àÖ (head' x‚ÇÄ‚àâx‚ÇÅs)
-- -- -- --   ‚à©‚Ä≤‚Üí‚à© (œÜ ‚àÖ‚äÇy‚ÇÄs y‚ÇÄ‚àâx‚ÇÄs y‚ÇÄx‚ÇÄs‚à©‚Ä≤y‚ÇÅs) = {!y‚ÇÄx‚ÇÄs‚à©‚Ä≤y‚ÇÅs!}

-- -- -- --   ‚à©‚Üí‚à©‚Ä≤ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí {x y : ùïÉ ùê¥} ‚Üí ‚åú x ‚à© y ‚â°‚àÖ‚åù ‚Üí ‚åú x ‚à©‚Ä≤ y ‚â°‚àÖ‚åù
-- -- -- --   ‚à©‚Üí‚à©‚Ä≤ {y = ‚àÖ} Œµ = Œµ
-- -- -- --   ‚à©‚Üí‚à©‚Ä≤ {y = ‚à∑ y‚ÇÄ‚àây‚ÇÅs} Œµ = œÜ (‚àÖ‚äÇ‚à∑ y‚ÇÄ‚àây‚ÇÅs) ‚àâ‚àÖ {!!}
-- -- -- --   ‚à©‚Üí‚à©‚Ä≤ (œÜ ‚àÖ‚äÇx‚ÇÄs x‚ÇÄ‚àây‚ÇÄs x‚ÇÅ) = {!!}

-- -- -- -- -- append : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí (x‚ÇÄ : ùê¥) ‚Üí (ys : ùïÉ ùê¥) ‚Üí (x‚ÇÄ‚àâys : x‚ÇÄ ‚àâ ys) ‚Üí ‚àÉ Œª y‚ÇÄsx‚ÇÄ ‚Üí ‚àÄ {u} ‚Üí u ‚àâ ys ‚Üí u ‚â¢ x‚ÇÄ ‚Üí u ‚àâ y‚ÇÄsx‚ÇÄ
-- -- -- -- -- append x‚ÇÄ ‚àÖ _ = ‚à∑ {x‚ÇÄ = x‚ÇÄ} ‚àâ‚àÖ , (Œª {u‚àâ‚àÖ u‚â¢x‚ÇÄ ‚Üí ‚àâ‚à∑ u‚â¢x‚ÇÄ ‚àâ‚àÖ ‚àâ‚àÖ})
-- -- -- -- -- append x‚ÇÄ (‚à∑ {y‚ÇÄ} {y‚ÇÅs} y‚ÇÄ‚àây‚ÇÅs) (‚àâ‚à∑ x‚ÇÄ‚â¢y‚ÇÄ x‚ÇÄ‚àây‚ÇÅs .y‚ÇÄ‚àây‚ÇÅs) = ‚à∑ {x‚ÇÄ = y‚ÇÄ} {x‚ÇÅs = fst (append x‚ÇÄ y‚ÇÅs x‚ÇÄ‚àây‚ÇÅs)} {!!} , {!!}

-- -- -- -- data ‚åú_‚à©_‚â°‚àÖ‚åù {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí ùïÉ ùê¥ ‚Üí Set ùë® where
-- -- -- --   Œµ : ‚àÄ {y‚ÇÄs} ‚Üí ‚åú ‚àÖ ‚à© y‚ÇÄs ‚â°‚àÖ‚åù
-- -- -- --   œÜ : ‚àÄ {x‚ÇÄs y‚ÇÄs} ‚Üí (‚àÖ‚äÇx‚ÇÄs : ‚àÖ‚äÇ x‚ÇÄs) ‚Üí (x‚ÇÄ‚àây‚ÇÄs : head ‚àÖ‚äÇx‚ÇÄs ‚àâ y‚ÇÄs) ‚Üí  ‚åú tail ‚àÖ‚äÇx‚ÇÄs ‚à© ‚à∑ x‚ÇÄ‚àây‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù
-- -- -- -- -- œÜ (abc ‚à© def) ‚Üí dabc ‚à© ef
-- -- -- -- -- -- ‚à™ ≥ abc def = cbadef
-- -- -- -- -- -- ‚à™ ≥ a bcdef = abcdef
-- -- -- -- -- ‚à™ ≥ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄs y‚ÇÄs} ‚Üí ‚åú x‚ÇÄs ‚à© y‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ùïÉ ùê¥
-- -- -- -- -- ‚à™ ≥ ‚àÖ = ‚àÖ
-- -- -- -- -- ‚à™ ≥ (Œµ (‚àÖ‚äÇ‚à∑ y‚ÇÄs)) = {!y‚ÇÄs!}
-- -- -- -- -- ‚à™ ≥ (œÜ {x‚ÇÄs} {y‚ÇÄs} ‚àÖ‚äÇx‚ÇÄs x‚ÇÄ‚àây‚ÇÄs x‚ÇÅs‚à©x‚ÇÄy‚ÇÄs‚â°‚àÖ) = ‚à™ ≥ x‚ÇÅs‚à©x‚ÇÄy‚ÇÄs‚â°‚àÖ

-- -- -- -- -- -- ‚à™ ≥‚Ä≤ abc def = fedabc
-- -- -- -- -- -- ‚à™ ≥‚Ä≤ a bcdef = fedcba
-- -- -- -- -- ‚à™ ≥‚Ä≤ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄs y‚ÇÄs} ‚Üí ‚åú x‚ÇÄs ‚à©‚Ä≤ y‚ÇÄs ‚â°‚àÖ‚åù ‚Üí ùïÉ ùê¥
-- -- -- -- -- ‚à™ ≥‚Ä≤ ‚àÖ = ‚àÖ
-- -- -- -- -- ‚à™ ≥‚Ä≤ (Œµ {x‚ÇÄs}) = x‚ÇÄs
-- -- -- -- -- ‚à™ ≥‚Ä≤ (œÜ {x‚ÇÄs} {y‚ÇÄs} ‚àÖ‚äÇy‚ÇÄs y‚ÇÄ‚àâx‚ÇÄs y‚ÇÄx‚ÇÄs‚à©y‚ÇÅs‚â°‚àÖ) = ‚à™ ≥‚Ä≤ y‚ÇÄx‚ÇÄs‚à©y‚ÇÅs‚â°‚àÖ



-- -- -- -- -- {-
-- -- -- -- -- a ‚à© (b ‚à© (c ‚à© (def)))
-- -- -- -- -- abc ‚à™ def = cbadef
-- -- -- -- -- x‚ÇÄs
-- -- -- -- -- ‚à™ (x‚ÇÄ ‚à© x‚ÇÅs               ‚â°‚àÖ)
-- -- -- -- -- ‚à™ (x‚ÇÄ ‚à© (‚à™ (x‚ÇÅ ‚à© x‚ÇÇs ‚â°‚àÖ)) ‚â°‚àÖ)
-- -- -- -- -- ‚à™ (‚à™ (x‚ÇÄ ‚à© x‚ÇÅ ‚â°‚àÖ) ‚à© x‚ÇÇs ‚â°‚àÖ)
-- -- -- -- -- -}

-- -- -- -- -- x‚àâyz‚Üíx‚àây : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x : ùê¥} {y z : ùïÉ ùê¥} ‚Üí (y‚à©z‚â°‚àÖ : ‚åú y ‚à© z ‚â°‚àÖ‚åù) ‚Üí x ‚àâ ‚à™ ≥ y‚à©z‚â°‚àÖ ‚Üí x ‚àâ y
-- -- -- -- -- x‚àâyz‚Üíx‚àây ‚àÖ _ = ‚àâ‚àÖ
-- -- -- -- -- x‚àâyz‚Üíx‚àây (Œµ _) _ = ‚àâ‚àÖ
-- -- -- -- -- x‚àâyz‚Üíx‚àây (œÜ (‚àÖ‚äÇ‚à∑ y‚ÇÄ‚àây‚ÇÅs) y‚ÇÄ‚àâz y‚ÇÅs‚à©y‚ÇÄz‚â°‚àÖ) x‚àây‚ÇÅs‚à™y‚ÇÄz = {!x‚àây‚ÇÅs‚à™y‚ÇÄz!}

-- -- -- -- -- ‚à™‚à©-assoc : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x yz y z : ùïÉ ùê¥} ‚Üí (y‚à©z‚â°‚àÖ : ‚åú y ‚à© z ‚â°‚àÖ‚åù) ‚Üí (x‚à©yz‚â°‚àÖ : ‚åú x ‚à© (‚à™ ≥ y‚à©z‚â°‚àÖ) ‚â°‚àÖ‚åù) ‚Üí ‚åú x ‚à© y ‚â°‚àÖ‚åù
-- -- -- -- -- ‚à™‚à©-assoc {ùë®} {ùê¥} {x} {yz} {y} {z} y‚à©z‚â°‚àÖ x‚à©yz‚â°‚àÖ = {!!}
-- -- -- -- -- --‚à™‚à©-assoc y‚à©z‚â°‚àÖ ‚àÖ = ?
-- -- -- -- -- --‚à™‚à©-assoc y‚à©z‚â°‚àÖ (Œµ _) = Œµ
-- -- -- -- -- --‚à™‚à©-assoc y‚à©z‚â°‚àÖ (œÜ ‚àÖ‚äÇx x‚ÇÄ‚àâyz x‚ÇÅs‚à©x‚ÇÄyz‚â°‚àÖ) = œÜ ‚àÖ‚äÇx {!!} {!!}

-- -- -- -- -- -- (y‚à©z‚â°‚àÖ : ‚åú y ‚à© z ‚â°‚àÖ‚åù) ‚Üí ‚à™
-- -- -- -- -- -- ‚åú xs ‚à© (‚à™ ‚åú ys ‚à© zs ‚â°‚àÖ‚åù) ‚â°‚àÖ‚åù ‚Üí ‚à™ (‚à™ ‚åú xs ‚à© ys ‚â°‚àÖ‚åù) (‚à™ ‚åú ys ‚à© zs ‚â°‚àÖ‚åù) ‚â°‚àÖ‚åù

-- -- -- -- -- init[1] : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L : ùïÉ ùê¥} ‚Üí ‚àÖ‚äÇ L ‚Üí ùïÉ ùê¥
-- -- -- -- -- init[1] (‚àÖ‚äÇ‚à∑ {x‚ÇÄ} ‚àâ‚àÖ) = ‚àÖ
-- -- -- -- -- init[1] (‚àÖ‚äÇ‚à∑ {x‚ÇÄ} (‚àâ‚à∑ {x‚ÇÅ} x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâ‚àÖ                     ‚àâ‚àÖ))                                             = ‚à∑ x‚ÇÄ‚àâ‚àÖ
-- -- -- -- -- init[1] (‚àÖ‚äÇ‚à∑ {x‚ÇÄ} (‚àâ‚à∑ {x‚ÇÅ} x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs                   (‚àâ‚à∑ {x‚ÇÇ} x‚ÇÅ‚â¢x‚ÇÇ x‚ÇÅ‚àâ‚àÖ   ‚àâ‚àÖ)))                      = ‚à∑ (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ ‚àâ‚àÖ ‚àâ‚àÖ)
-- -- -- -- -- init[1] (‚àÖ‚äÇ‚à∑ {x‚ÇÄ} (‚àâ‚à∑ {x‚ÇÅ} x‚ÇÄ‚â¢x‚ÇÅ (‚àâ‚à∑ {x‚ÇÇ} x‚ÇÄ‚â¢x‚ÇÇ x‚ÇÄ‚àâx‚ÇÉs _) (‚àâ‚à∑      x‚ÇÅ‚â¢x‚ÇÇ x‚ÇÅ‚àâx‚ÇÉs (‚àâ‚à∑ {x‚ÇÉ} x‚ÇÇ‚â¢x‚ÇÉ x‚ÇÇ‚àâ‚àÖ ‚àâ‚àÖ)))) = ‚à∑ (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÇ ‚àâ‚àÖ ‚àâ‚àÖ) (‚àâ‚à∑ x‚ÇÅ‚â¢x‚ÇÇ ‚àâ‚àÖ ‚àâ‚àÖ))
-- -- -- -- -- init[1] (‚àÖ‚äÇ‚à∑ (‚àâ‚à∑ x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÅs (‚àâ‚à∑ x‚ÇÅ‚â¢x‚ÇÇ x‚ÇÅ‚àâx‚ÇÇs (‚àâ‚à∑ x‚ÇÉ x‚ÇÇ‚àâx‚ÇÉs‚ÇÇ (‚àâ‚à∑ x x‚ÇÇ‚àâx‚ÇÉs‚ÇÅ x‚ÇÇ‚àâx‚ÇÉs))))) = {!!}
