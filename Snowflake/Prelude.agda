--{-# OPTIONS --show-implicit #-}
module Snowflake.Prelude where

data ‚ä• : Set where

‚ä•-elim : ‚àÄ {a} {A : Set a} ‚Üí ‚ä• ‚Üí A
‚ä•-elim ()
{-# INLINE ‚ä•-elim #-}

infix 3 ¬¨_
¬¨_ : ‚àÄ {a} (A : Set a) ‚Üí Set a
¬¨ A = A ‚Üí ‚ä•

open import Agda.Primitive
open import Agda.Builtin.Nat public
     using ( zero
           ; suc
           ; _-_
           ; _+_
           )
  renaming (Nat to ‚Ñï)
open import Agda.Builtin.Equality public
     using (_‚â°_; refl)
open import Agda.Builtin.List public
     using ()
  renaming (List to ùë≥
           ;[] to ‚àÖ
           ; _‚à∑_ to _‚à∑‚Çó_
           )

data Dec {a} (P : Set a) : Set a where
  yes : P ‚Üí Dec P
  no  : ¬¨ P ‚Üí Dec P

sym : ‚àÄ {a} {A : Set a} {x y : A} ‚Üí x ‚â° y ‚Üí y ‚â° x
sym refl = refl

REL : ‚àÄ {a b} ‚Üí Set a ‚Üí Set b ‚Üí (‚Ñì : Level) ‚Üí Set (a ‚äî b ‚äî lsuc ‚Ñì)
REL A B ‚Ñì = A ‚Üí B ‚Üí Set ‚Ñì

Rel : ‚àÄ {a} ‚Üí Set a ‚Üí (‚Ñì : Level) ‚Üí Set (a ‚äî lsuc ‚Ñì)
Rel A ‚Ñì = REL A A ‚Ñì

_Respects_ : ‚àÄ {a ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Set a} ‚Üí (A ‚Üí Set ‚Ñì‚ÇÅ) ‚Üí Rel A ‚Ñì‚ÇÇ ‚Üí Set _
P Respects _‚àº_ = ‚àÄ {x y} ‚Üí x ‚àº y ‚Üí P x ‚Üí P y

Substitutive : ‚àÄ {a ‚Ñì‚ÇÅ} {A : Set a} ‚Üí Rel A ‚Ñì‚ÇÅ ‚Üí (‚Ñì‚ÇÇ : Level) ‚Üí Set _
Substitutive {A = A} _‚àº_ p = (P : A ‚Üí Set p) ‚Üí P Respects _‚àº_

subst : ‚àÄ {a p} {A : Set a} ‚Üí Substitutive (_‚â°_ {A = A}) p
subst P refl p = p

sucsuc‚â° : ‚àÄ {a b : ‚Ñï} ‚Üí suc a ‚â° suc b ‚Üí a ‚â° b
sucsuc‚â° refl = refl

_‚âü_ : (a : ‚Ñï) ‚Üí (b : ‚Ñï) ‚Üí Dec (a ‚â° b)
zero ‚âü zero = yes refl
zero ‚âü suc b = no (Œª ())
suc a ‚âü zero = no (Œª ())
suc a ‚âü suc b with a ‚âü b
‚Ä¶ | yes eq rewrite eq = yes refl
‚Ä¶ | no neq = no (Œª x ‚Üí ‚ä•-elim (neq (sucsuc‚â° x)))

_‚â¢_ : ‚àÄ {a} {A : Set a} ‚Üí A ‚Üí A ‚Üí Set a
A ‚â¢ B = ¬¨ A ‚â° B

open import Prelude.Memoization
open import Prelude.Nat
open import Prelude.Product

record Valueable {a} (A : Set a) : Set a where
  field
    value : (x : A) ‚Üí Mem x

open Valueable ‚¶É ... ‚¶Ñ

infixr 0 _$_
_$_ : ‚àÄ {a b} {A : Set a} {B : A ‚Üí Set b} ‚Üí (‚àÄ x ‚Üí B x) ‚Üí ‚àÄ x ‚Üí B x
f $ x = f x

infixl 0 $-syntax
$-syntax : ‚àÄ {a b} {A : Set a} {B : A ‚Üí Set b} ‚Üí (‚àÄ x ‚Üí B x) ‚Üí ‚àÄ x ‚Üí B x
$-syntax = _$_

infixr 0 _!$_
_!$_ : ‚àÄ {a} {A : Set a} {b} {B : A ‚Üí Set b} ‚Üí ((x : A) ‚Üí B x) ‚Üí ‚¶É _ : Valueable A ‚¶Ñ ‚Üí ‚àÄ x ‚Üí B x
f  !$ x with value x
... | (x' , x-refl) rewrite sym x-refl = f x'

infixl 0 !$-syntax‚ÇÅ
!$-syntax‚ÇÅ : ‚àÄ {a} {A : Set a} {b} {B : A ‚Üí Set b} ‚Üí ((x : A) ‚Üí B x) ‚Üí ‚¶É _ : Valueable A ‚¶Ñ ‚Üí (x : A) ‚Üí B x
!$-syntax‚ÇÅ = _!$_

infixl 0 !$-syntax‚ÇÇ
!$-syntax‚ÇÇ : ‚àÄ {a} {A : Set a} {b} {B : A ‚Üí Set b} ‚Üí ((x : A) ‚Üí B x) ‚Üí ‚¶É _ : Valueable A ‚¶Ñ ‚Üí (x : A) ‚Üí B x
!$-syntax‚ÇÇ = _!$_

syntax $-syntax f x = x |‚ãô f
syntax !$-syntax‚ÇÅ f x = x !|‚ãô f
syntax !$-syntax‚ÇÇ (Œª v ‚Üí f) x = !let v != x !in f

infixr 9 _‚àò_
_‚àò_ : ‚àÄ {a b c} {A : Set a} {B : A ‚Üí Set b} {C : ‚àÄ x ‚Üí B x ‚Üí Set c}
        (f : ‚àÄ {x} (y : B x) ‚Üí C x y) (g : ‚àÄ x ‚Üí B x) ‚Üí
        ‚àÄ x ‚Üí C x (g x)
(f ‚àò g) x = f (g x)
{-# INLINE _‚àò_ #-}

infixl 9 ‚àò-syntax
‚àò-syntax : ‚àÄ {a b c} {A : Set a} {B : A ‚Üí Set b} {C : ‚àÄ x ‚Üí B x ‚Üí Set c}
             (f : ‚àÄ {x} (y : B x) ‚Üí C x y) (g : ‚àÄ x ‚Üí B x) ‚Üí
             ‚àÄ x ‚Üí C x (g x)
‚àò-syntax = _‚àò_

infixr 9 _!‚àò_
_!‚àò_ : ‚àÄ {a b c} {A : Set a} {B : A ‚Üí Set b} {C : ‚àÄ x ‚Üí B x ‚Üí Set c}
         (f : ‚àÄ {x} (y : B x) ‚Üí C x y) (g : ‚àÄ x ‚Üí B x) ‚Üí
         ‚¶É _ : Valueable A ‚¶Ñ ‚Üí
         ‚¶É _ : {x : A} ‚Üí Valueable (B x) ‚¶Ñ ‚Üí
         ‚àÄ x ‚Üí C x (g x)
(f !‚àò g) x with value x
... | (x' , x-refl) rewrite sym x-refl with value (g x')
... | (gx' , gx-refl) rewrite sym gx-refl = f !$ gx'
  --!let gx != (g !$ x) !in (f !$ gx)

infixl 9 !‚àò-syntax
!‚àò-syntax : ‚àÄ {a b c} {A : Set a} {B : A ‚Üí Set b} {C : ‚àÄ x ‚Üí B x ‚Üí Set c}
              (f : ‚àÄ {x} (y : B x) ‚Üí C x y) (g : ‚àÄ x ‚Üí B x) ‚Üí
              ‚¶É _ : Valueable A ‚¶Ñ ‚Üí
              ‚¶É _ : {x : A} ‚Üí Valueable (B x) ‚¶Ñ ‚Üí
              ‚àÄ x ‚Üí C x (g x)
!‚àò-syntax = _!‚àò_

syntax ‚àò-syntax f g = g ‚ãô f
syntax !‚àò-syntax f g = g !‚ãô f

data ùïÉ {ùë®} (ùê¥ : Set ùë®) : Set ùë®
data _‚àâ_ {ùë®} {ùê¥ : Set ùë®} (x : ùê¥) : ùïÉ ùê¥ ‚Üí Set ùë®

data ùïÉ {ùë®} (ùê¥ : Set ùë®) where
  ‚àÖ : ùïÉ ùê¥
  ‚úì : {x‚ÇÄ : ùê¥} ‚Üí {x‚ÇÅs : ùïÉ ùê¥} ‚Üí x‚ÇÄ ‚àâ x‚ÇÅs ‚Üí ùïÉ ùê¥

data _‚àâ_ {ùë®} {ùê¥ : Set ùë®} (ùîû : ùê¥) where
  ‚àÖ : ùîû ‚àâ ‚àÖ
  ‚óè : ‚àÄ {x‚ÇÄ} ‚Üí ùîû ‚â¢ x‚ÇÄ ‚Üí ‚àÄ {x‚ÇÅs} ‚Üí ùîû ‚àâ x‚ÇÅs ‚Üí (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) ‚Üí ùîû ‚àâ ‚úì x‚ÇÄ‚àâx‚ÇÅs

mutual
  ùïÉŒº : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí (l : ùïÉ ùê¥) ‚Üí Mem l
  ùïÉŒº ‚àÖ = putŒº refl
  ùïÉŒº (‚úì x) with ‚àâŒº x
  ... | (mx , x-refl) rewrite sym x-refl = ‚úì mx , refl

  ‚àâŒº : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x : ùê¥} ‚Üí {l : ùïÉ ùê¥} ‚Üí (x‚àâl : x ‚àâ l) ‚Üí Mem x‚àâl
  ‚àâŒº ‚àÖ = putŒº refl
  ‚àâŒº (‚óè x‚ÇÇ x‚ÇÉ x‚ÇÅ) with ‚àâŒº x‚ÇÉ | ‚àâŒº x‚ÇÅ
  ... | (mx‚ÇÉ , x‚ÇÉ-refl) | (mx‚ÇÅ , x‚ÇÅ-refl) rewrite sym x‚ÇÉ-refl | sym x‚ÇÅ-refl = ‚óè x‚ÇÇ mx‚ÇÉ mx‚ÇÅ , refl

instance
  ApplyableùïÉ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí Valueable (ùïÉ ùê¥)
  ApplyableùïÉ = record { value = ùïÉŒº }

--pattern ‚ü¶_‚üß x‚ÇÄ‚àâx‚ÇÅs = ‚úì x‚ÇÄ‚àâx‚ÇÅs

data ‚àÖ‚äÇ_ {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí Set ùë® where
  ‚úì : ‚àÄ {x‚ÇÄ x‚ÇÅs} ‚Üí (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) ‚Üí ‚àÖ‚äÇ ‚úì x‚ÇÄ‚àâx‚ÇÅs

pattern tail= x‚ÇÅs = ‚úì {x‚ÇÅs = x‚ÇÅs} _
pattern [_] x‚ÇÄ = ‚úì {x‚ÇÄ = x‚ÇÄ} ‚àÖ
pattern _‚ÇÄ‚à∑‚ÇÅ_‚à∑‚ü¶_‚üß x‚ÇÄ x‚ÇÅ x‚ÇÇs = ‚úì {x‚ÇÄ = x‚ÇÄ} (‚óè {x‚ÇÅ} _ {x‚ÇÇs} _ _)

pattern _‚Ü∂_‚Ü∑_ x‚ÇÄ‚àâx‚ÇÇs x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÅ‚àâx‚ÇÇs = ‚óè x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs

ùïÉ‚Üíùë≥ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ùë≥ ùê¥
ùïÉ‚Üíùë≥ ‚àÖ = ‚àÖ
ùïÉ‚Üíùë≥ [ x ] = x ‚à∑‚Çó ‚àÖ
ùïÉ‚Üíùë≥ (x‚ÇÄ ‚ÇÄ‚à∑‚ÇÅ x‚ÇÅ ‚à∑‚ü¶ x‚ÇÇs ‚üß) = x‚ÇÄ ‚à∑‚Çó x‚ÇÅ ‚à∑‚Çó ùïÉ‚Üíùë≥ x‚ÇÇs

data _‚àà_ {ùë®} {ùê¥ : Set ùë®} (ùîû : ùê¥) : ùïÉ ùê¥ ‚Üí Set ùë® where
  here : ‚àÄ {x‚ÇÄs} (ùîû‚àâx‚ÇÄs : ùîû ‚àâ x‚ÇÄs) ‚Üí ùîû ‚àà ‚úì ùîû‚àâx‚ÇÄs
  there : ‚àÄ {x‚ÇÅs} ‚Üí (ùîû‚ààx‚ÇÅs : ùîû ‚àà x‚ÇÅs) ‚Üí ‚àÄ {x‚ÇÄ} ‚Üí (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs)  ‚Üí ùîû ‚àà ‚úì x‚ÇÄ‚àâx‚ÇÅs

data _[_]=_ {ùë®} {ùê¥ : Set ùë®} : ùïÉ ùê¥ ‚Üí ‚Ñï ‚Üí ùê¥ ‚Üí Set ùë® where
  here  : ‚àÄ {ùîû xs} (ùîû‚àâxs : ùîû ‚àâ xs) ‚Üí ‚úì ùîû‚àâxs [ 0 ]= ùîû
  there : ‚àÄ {x‚ÇÄ x‚ÇÅs} (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) {i ùîû} (x‚ÇÅs[i]=ùîû : x‚ÇÅs [ i ]= ùîû) ‚Üí ‚úì x‚ÇÄ‚àâx‚ÇÅs [ suc i ]= ùîû

‚ä•-ùïÉ[i]=x‚àâùïÉ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L : ùïÉ ùê¥} {n} {a} ‚Üí L [ n ]= a ‚Üí a ‚àâ L ‚Üí ‚ä•
‚ä•-ùïÉ[i]=x‚àâùïÉ (here _) (_ ‚Ü∂ x ‚Ü∑ _) = x refl
‚ä•-ùïÉ[i]=x‚àâùïÉ (there _ x) (x‚ÇÇ ‚Ü∂ _ ‚Ü∑ _) = ‚ä•-ùïÉ[i]=x‚àâùïÉ x x‚ÇÇ

lastIndex : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L : ùïÉ ùê¥} (‚àÖ‚äÇL : ‚àÖ‚äÇ L) ‚Üí ‚Ñï
lastIndex [ _ ] = 0
lastIndex (‚úì (_ ‚Ü∂ _ ‚Ü∑ x‚ÇÄ‚àâx‚ÇÅs)) = suc (lastIndex (‚úì x‚ÇÄ‚àâx‚ÇÅs))

length : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ‚Ñï
length ‚àÖ = 0
length (tail= x‚ÇÅs) = suc (length x‚ÇÅs)

sym‚â¢ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x y : ùê¥} ‚Üí x ‚â¢ y ‚Üí y ‚â¢ x
sym‚â¢ x‚ÇÅ x‚ÇÇ = x‚ÇÅ (sym x‚ÇÇ)

postulate
  T : Set
  ‚ãÜa ‚ãÜb ‚ãÜc ‚ãÜd : T
  a‚â¢b : ‚ãÜa ‚â¢ ‚ãÜb
  a‚â¢c : ‚ãÜa ‚â¢ ‚ãÜc
  a‚â¢d : ‚ãÜa ‚â¢ ‚ãÜd
  b‚â¢c : ‚ãÜb ‚â¢ ‚ãÜc
  b‚â¢d : ‚ãÜb ‚â¢ ‚ãÜd
  c‚â¢d : ‚ãÜc ‚â¢ ‚ãÜd

b‚â¢a = sym‚â¢ a‚â¢b
c‚â¢a = sym‚â¢ a‚â¢c
d‚â¢a = sym‚â¢ a‚â¢d
c‚â¢b = sym‚â¢ b‚â¢c
d‚â¢b = sym‚â¢ b‚â¢d
d‚â¢c = sym‚â¢ c‚â¢d

a‚àÖ : ‚ãÜa ‚àâ ‚àÖ
a‚àÖ = ‚àÖ

{-
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
regexp scratch
=======================================================
\1 ‚Ü∂ \2 ‚Ü∑ \3\4
=======================================================
\(?:‚óè\)                    -- function head
\(?: \|$\)+                -- delimiter
\(?2:[^ (){}]+?\)          -- parm x‚ÇÄ‚â¢x‚ÇÅ
\(?: \|$\)+                -- delimiter
\(?1:[^ (){}]+?\)          -- parm x‚ÇÄ‚àâx‚ÇÇs
\(?: \|$\)+                -- delimiter
\(?3:[^ (){}]+?\)          -- parm x‚ÇÅ‚àâx‚ÇÇs
\(?4:\([ (){}]\|$\|\'\)\)  -- end
=======================================================
\(?:‚óè\)\(?: \|$\)+\(?2:[^ (){}]+?\)\(?: \|$\)+\(?1:[^ (){}]+?\)\(?: \|$\)+\(?3:[^ (){}]+?\)\(?4:\([ (){}]\|$\|\'\)\)
=======================================================
‚óè x‚ÇÄ‚â¢x‚ÇÅ x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-}
----------------------------------------------------------------------------------------------------------------------------------------
a‚àâb   = ‚àÖ ‚Ü∂ a‚â¢b ‚Ü∑ ‚àÖ
c‚àâb   = ‚àÖ ‚Ü∂ c‚â¢b ‚Ü∑ ‚àÖ
d‚àâb   = ‚àÖ ‚Ü∂ d‚â¢b ‚Ü∑ ‚àÖ
a‚àâc   = ‚àÖ ‚Ü∂ a‚â¢c ‚Ü∑ ‚àÖ
b‚àâc   = ‚àÖ ‚Ü∂ b‚â¢c ‚Ü∑ ‚àÖ
c‚àâd   = ‚àÖ ‚Ü∂ c‚â¢d ‚Ü∑ ‚àÖ
b‚àâd   = ‚àÖ ‚Ü∂ b‚â¢d ‚Ü∑ ‚àÖ
a‚àâd   = ‚àÖ ‚Ü∂ a‚â¢d ‚Ü∑ ‚àÖ
b‚àâa   = ‚àÖ ‚Ü∂ b‚â¢a ‚Ü∑ ‚àÖ
c‚àâa   = ‚àÖ ‚Ü∂ c‚â¢a ‚Ü∑ ‚àÖ
d‚àâa   = ‚àÖ ‚Ü∂ d‚â¢a ‚Ü∑ ‚àÖ
a‚àâbc  = a‚àâc ‚Ü∂ a‚â¢b ‚Ü∑ b‚àâc
a‚àâcd  = a‚àâd ‚Ü∂ a‚â¢c ‚Ü∑ c‚àâd
b‚àâcd  = b‚àâd ‚Ü∂ b‚â¢c ‚Ü∑ c‚àâd
c‚àâab  = c‚àâb ‚Ü∂ c‚â¢a ‚Ü∑ a‚àâb
d‚àâab  = d‚àâb ‚Ü∂ d‚â¢a ‚Ü∑ a‚àâb
c‚àâba  = c‚àâa ‚Ü∂ c‚â¢b ‚Ü∑ b‚àâa
d‚àâba  = d‚àâa ‚Ü∂ d‚â¢b ‚Ü∑ b‚àâa
a‚àâbcd = a‚àâcd ‚Ü∂ a‚â¢b ‚Ü∑ b‚àâcd
d‚àâcab = d‚àâab ‚Ü∂ d‚â¢c ‚Ü∑ c‚àâab
d‚àâcba = d‚àâba ‚Ü∂ d‚â¢c ‚Ü∑ c‚àâba

open import Prelude.Function using (id {-syntax ofType-})

[a]
 [ab]
 [ba]
 [abc]
 [cab]
 [cba]
 [abcd]
 [dcab]
 [dcba] : ùïÉ T -- TODO why is indentation needed?

[a]    = ‚úì a‚àÖ
[ab]   = ‚úì a‚àâb
[ba]   = ‚úì b‚àâa
[abc]  = ‚úì a‚àâbc
[cab]  = ‚úì c‚àâab
[cba]  = ‚úì c‚àâba
[abcd] = ‚úì a‚àâbcd
[dcab] = ‚úì d‚àâcab
[dcba] = ‚úì d‚àâcba

last : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L} ‚Üí ‚àÖ‚äÇ L ‚Üí ùê¥
last [ x‚ÇÄ ] = x‚ÇÄ
last (tail= (‚úì x‚ÇÅ‚àâx‚ÇÇs)) = last (‚úì x‚ÇÅ‚àâx‚ÇÇs)

_[lastIndex]=last : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {L : ùïÉ ùê¥} ‚Üí (‚àÖ‚äÇL : ‚àÖ‚äÇ L) ‚Üí L [ lastIndex ‚àÖ‚äÇL ]= last ‚àÖ‚äÇL
[ _ ] [lastIndex]=last = here ‚àÖ
(‚úì (x‚ÇÄ‚àâx‚ÇÅs‚ÇÅ ‚Ü∂ x ‚Ü∑ x‚ÇÄ‚àâx‚ÇÅs)) [lastIndex]=last = there (x‚ÇÄ‚àâx‚ÇÅs‚ÇÅ ‚Ü∂ x ‚Ü∑ x‚ÇÄ‚àâx‚ÇÅs) (‚úì x‚ÇÄ‚àâx‚ÇÅs [lastIndex]=last)

mutual
  init : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄs : ùïÉ ùê¥} (‚àÖ‚äÇx‚ÇÄs : ‚àÖ‚äÇ x‚ÇÄs) ‚Üí ùïÉ ùê¥
  init [ _ ] = ‚àÖ
  init (‚úì (x‚ÇÄ‚àâx‚ÇÇs ‚Ü∂ _ ‚Ü∑ x‚ÇÅ‚àâx‚ÇÇs)) = ‚úì (init‚àâ (‚úì _) (x‚ÇÄ‚àâx‚ÇÇs ‚Ü∂ _ ‚Ü∑ x‚ÇÅ‚àâx‚ÇÇs))

  init‚àâ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄ : ùê¥} {x‚ÇÅs : ùïÉ ùê¥} (‚àÖ‚äÇx‚ÇÅs : ‚àÖ‚äÇ x‚ÇÅs) ‚Üí x‚ÇÄ ‚àâ x‚ÇÅs ‚Üí x‚ÇÄ ‚àâ init ‚àÖ‚äÇx‚ÇÅs
  init‚àâ () ‚àÖ
  init‚àâ (‚úì _) (‚àÖ ‚Ü∂ _ ‚Ü∑ ‚àÖ) = ‚àÖ
  init‚àâ (‚úì _) ((x‚ÇÄ‚àâx‚ÇÉs ‚Ü∂ x‚ÇÄ‚â¢x‚ÇÇ ‚Ü∑ x‚ÇÇ‚àâx‚ÇÉs) ‚Ü∂ x‚ÇÄ‚â¢x‚ÇÅ ‚Ü∑ (x‚ÇÅ‚àâx‚ÇÉs ‚Ü∂ x‚ÇÅ‚â¢x‚ÇÇ ‚Ü∑ .x‚ÇÇ‚àâx‚ÇÉs)) = init‚àâ _ (x‚ÇÄ‚àâx‚ÇÉs ‚Ü∂ x‚ÇÄ‚â¢x‚ÇÇ ‚Ü∑ x‚ÇÇ‚àâx‚ÇÉs) ‚Ü∂ x‚ÇÄ‚â¢x‚ÇÅ ‚Ü∑ init‚àâ _ (x‚ÇÅ‚àâx‚ÇÉs ‚Ü∂ x‚ÇÅ‚â¢x‚ÇÇ ‚Ü∑ x‚ÇÇ‚àâx‚ÇÉs)

rotateDown‚àâ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {xs : ùïÉ ùê¥} (‚àÖ‚äÇxs : ‚àÖ‚äÇ xs) ‚Üí last ‚àÖ‚äÇxs ‚àâ init ‚àÖ‚äÇxs
rotateDown‚àâ [ _ ] = ‚àÖ
rotateDown‚àâ (‚úì (x‚ÇÄ‚àâx‚ÇÇs ‚Ü∂ x‚ÇÄ‚â¢x‚ÇÅ ‚Ü∑ x‚ÇÅ‚àâx‚ÇÇs)) =
  let x‚Çô‚â¢x‚ÇÄ = Œª lastx‚ÇÅs‚â°x‚ÇÄ ‚Üí let x‚ÇÅs[last]=x‚ÇÄ : ‚úì x‚ÇÅ‚àâx‚ÇÇs [ lastIndex (‚úì x‚ÇÅ‚àâx‚ÇÇs) ]= _
                                 x‚ÇÅs[last]=x‚ÇÄ = subst (‚úì x‚ÇÅ‚àâx‚ÇÇs [ lastIndex (‚úì x‚ÇÅ‚àâx‚ÇÇs) ]=_) lastx‚ÇÅs‚â°x‚ÇÄ (‚úì x‚ÇÅ‚àâx‚ÇÇs [lastIndex]=last)
                             in
                               ‚ä•-ùïÉ[i]=x‚àâùïÉ x‚ÇÅs[last]=x‚ÇÄ (x‚ÇÄ‚àâx‚ÇÇs ‚Ü∂ x‚ÇÄ‚â¢x‚ÇÅ ‚Ü∑ x‚ÇÅ‚àâx‚ÇÇs)
  in
    rotateDown‚àâ (‚úì x‚ÇÅ‚àâx‚ÇÇs) ‚Ü∂ x‚Çô‚â¢x‚ÇÄ ‚Ü∑ init‚àâ (‚úì x‚ÇÅ‚àâx‚ÇÇs) (x‚ÇÄ‚àâx‚ÇÇs ‚Ü∂ x‚ÇÄ‚â¢x‚ÇÅ ‚Ü∑ x‚ÇÅ‚àâx‚ÇÇs)

-- rotateDown "A12345678Z" = "ZA12345678"
rotateDown : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
rotateDown ‚àÖ = ‚àÖ
rotateDown [ x‚ÇÄ ] = [ x‚ÇÄ ]
rotateDown (‚úì x‚ÇÄ‚àâx‚ÇÅs) = ‚úì (rotateDown‚àâ (‚úì x‚ÇÄ‚àâx‚ÇÅs))

rotateDown-ex : ùïÉ‚Üíùë≥ (rotateDown [abcd]) ‚â° (‚ãÜd ‚à∑‚Çó ‚ãÜa ‚à∑‚Çó ‚ãÜb ‚à∑‚Çó ‚ãÜc ‚à∑‚Çó ‚àÖ)
rotateDown-ex = refl

-- swapTop "AB23456789" = "BA23456789"
swapTop : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
swapTop ‚àÖ = ‚àÖ
swapTop [ x‚ÇÄ ] = [ x‚ÇÄ ]
swapTop (‚úì (x‚ÇÄ‚àâx‚ÇÇs ‚Ü∂ x‚ÇÄ‚â¢x‚ÇÅ ‚Ü∑ x‚ÇÅ‚àâx‚ÇÇs)) = ‚úì (x‚ÇÅ‚àâx‚ÇÇs ‚Ü∂ sym‚â¢ x‚ÇÄ‚â¢x‚ÇÅ ‚Ü∑ x‚ÇÄ‚àâx‚ÇÇs)

swapTop-ex : ùïÉ‚Üíùë≥ (swapTop [abcd]) ‚â° (‚ãÜb ‚à∑‚Çó ‚ãÜa ‚à∑‚Çó ‚ãÜc ‚à∑‚Çó ‚ãÜd ‚à∑‚Çó ‚àÖ)
swapTop-ex = refl

-- rotateDownBy 2 "01234567AB" = "AB01234567"
-- rotateDownBy 3 s = rotateDown (rotateDown (rotateDown s))
open import Agda.Builtin.Nat using (_<_)
open import Agda.Builtin.Bool

{-# TERMINATING #-}
rotateDownBy : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
rotateDownBy n ‚àÖ = ‚àÖ
rotateDownBy 0 x = x
rotateDownBy (suc n) x with length x < suc (suc n)
... | true = rotateDownBy (suc n - length x) x
... | false = x !|‚ãô rotateDown !‚ãô rotateDownBy n

rotateDownBy-ex : ùïÉ‚Üíùë≥ (rotateDownBy 46 [abcd]) ‚â° (‚ãÜc ‚à∑‚Çó ‚ãÜd ‚à∑‚Çó ‚ãÜa ‚à∑‚Çó ‚ãÜb ‚à∑‚Çó ‚àÖ)
rotateDownBy-ex = refl

-- raiseFromBottom 3 "012345X789" = "01234X5789"
-- i.e. take the 3rd (indexed-from-the-right) item (X) and move it one space to the left
-- raiseFromBottom (lastIndex s - 1) s = swapTop s
raiseFromBottom : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
raiseFromBottom _ ‚àÖ = ‚àÖ
raiseFromBottom _ [ x‚ÇÄ ] = [ x‚ÇÄ ]
raiseFromBottom n xs = xs !|‚ãô rotateDownBy (2 + n) !‚ãô swapTop !‚ãô rotateDownBy (length xs - 2 - n)

raiseFromBottom-ex : ùïÉ‚Üíùë≥ (raiseFromBottom 2 [abcd]) ‚â° (‚ãÜb ‚à∑‚Çó ‚ãÜa ‚à∑‚Çó ‚ãÜc ‚à∑‚Çó ‚ãÜd ‚à∑‚Çó ‚àÖ)
raiseFromBottom-ex = refl

-- raiseBottomBy 2 "012345678X" = "0123456X78"
-- i.e. take the last item (X) and move it 2 spaces to the left
raiseBottomBy : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
raiseBottomBy _ ‚àÖ = ‚àÖ
raiseBottomBy _ [ x‚ÇÄ ] = [ x‚ÇÄ ]
raiseBottomBy 0 xs = xs
raiseBottomBy (suc n) xs = xs !|‚ãô raiseBottomBy n !‚ãô raiseFromBottom n

raiseBottomBy-ex : ùïÉ‚Üíùë≥ (raiseBottomBy 2 [abcd]) ‚â° (‚ãÜa ‚à∑‚Çó ‚ãÜd ‚à∑‚Çó ‚ãÜb ‚à∑‚Çó ‚ãÜc ‚à∑‚Çó ‚àÖ)
raiseBottomBy-ex = refl

-- ‚ü¶ 2 ‚ãÜ‚Üê 6 ‚üß "012345X789"
-- raiseFromTopBy 6 2 "012345X789" = "0123X45789"
-- i.e. take the 6th (indexed-from-the-left) item (X) and move it 2 places to the left
-- raiseFromTopBy 1 1 = swapTop
raiseFromTopBy : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ùïÉ ùê¥ ‚Üí ùïÉ ùê¥
raiseFromTopBy _ 0 xs = xs
raiseFromTopBy n m xs with length xs
... | l with suc n ‚âü l
... | yes _ = xs !|‚ãô raiseBottomBy m
... | no _  = xs !|‚ãô rotateDownBy (l - (suc n)) !‚ãô raiseBottomBy m !‚ãô rotateDownBy (suc n)

raiseFromTopBy-ex : ùïÉ‚Üíùë≥ (raiseFromTopBy 2 2 [abcd]) ‚â° (‚ãÜc ‚à∑‚Çó ‚ãÜa ‚à∑‚Çó ‚ãÜb ‚à∑‚Çó ‚ãÜd ‚à∑‚Çó ‚àÖ)
raiseFromTopBy-ex = refl

reorder : ‚àÄ {ùë®} {ùê¥ : Set ùë®} (L : ùïÉ ùê¥) ‚Üí ùë≥ ‚Ñï ‚Üí ùïÉ ùê¥
reorder xs perm = go 0 perm xs where
  go : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí (n : ‚Ñï) ‚Üí ùë≥ ‚Ñï ‚Üí (L : ùïÉ ùê¥) ‚Üí ùïÉ ùê¥
  go _ _ ‚àÖ = ‚àÖ
  go _ ‚àÖ xs = xs
  go n (p‚ÇÄ ‚à∑‚Çó ps) xs = go (suc n) ps !$ raiseFromTopBy (n + p‚ÇÄ) p‚ÇÄ xs

-- module M‚ÇÅ where
--   data Fin : ‚Ñï ‚Üí Set where
--     zero : Fin 0
--     suc : ‚àÄ {n} ‚Üí Fin n ‚Üí Fin (suc n)

--   data PermutationList : ‚Ñï ‚Üí Set where
--     ‚àÖ : PermutationList 0
--     _‚à∑_ : ‚àÄ {n} ‚Üí Fin n ‚Üí PermutationList n ‚Üí PermutationList (suc n)
--   {-
--   invariantLength-init : ‚àÄ {ùë®} {ùê¥ : Set ùë®} (x‚ÇÄ : ùê¥) (x‚ÇÅs : ùïÉ ùê¥) (x‚ÇÄ‚àâx‚ÇÅs
--     init : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄs : ùïÉ ùê¥} (‚àÖ‚äÇx‚ÇÄs : ‚àÖ‚äÇ x‚ÇÄs) ‚Üí ùïÉ ùê¥
--   -}

--   invariantLength-rotateDown : ‚àÄ {ùë®} {ùê¥ : Set ùë®} (xs : ùïÉ ùê¥) ‚Üí length (rotateDown xs) ‚â° length xs
--   invariantLength-rotateDown {ùë®} {ùê¥} ‚àÖ = {!!}
--   invariantLength-rotateDown {ùë®} {ùê¥} (‚úì {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅs = x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs) = {!!}
--   {-
--   invariantLength-rotateDown : ‚àÄ {ùë®} {ùê¥ : Set ùë®} (xs : ùïÉ ùê¥) ‚Üí length (rotateDown xs) ‚â° length xs
--   invariantLength-rotateDown ‚àÖ = refl
--   invariantLength-rotateDown [ x‚ÇÄ ] = refl
--   invariantLength-rotateDown (x‚ÇÄ ‚ÇÄ‚à∑‚ÇÅ x‚ÇÅ ‚à∑‚ü¶ x‚ÇÇs ‚üß) = {!!}
--   -}

--   {-# TERMINATING #-}
--   rotateDownBy' : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí (xs : ùïÉ ùê¥) ‚Üí Fin (length xs) ‚Üí ùïÉ ùê¥
--   rotateDownBy' ‚àÖ zero = ‚àÖ
--   rotateDownBy' (‚úì {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅs = x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs) (suc {n = n} n') = rotateDownBy' (rotateDown (‚úì x‚ÇÄ‚àâx‚ÇÅs)) (subst Fin (sym {!!}) n') -- (subst Fin (sym {!invariantLength-rotateDown!}) n) -- (subst {!!} (sym {!!}) {!!})

--   --rotateDownBy' n ‚àÖ = ‚àÖ
--   --rotateDownBy' x zero = x
--   --rotateDownBy' x (suc n) = x |‚ãô rotateDown ‚ãô rotateDownBy' n

-- module M‚ÇÇ where
--   data Fin : ‚Ñï ‚Üí Set where
--     zero : ‚àÄ ..{n} ‚Üí Fin (suc n)
--     suc  : ‚àÄ ..{n} (i : Fin n) ‚Üí Fin (suc n)

--   postulate
--     invariantLength : ‚àÄ {ùë®} {ùê¥ : Set ùë®} (x‚ÇÄ : ùê¥) (x‚ÇÅs : ùïÉ ùê¥) (x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs) ‚Üí suc (length x‚ÇÅs) ‚â° length (rotateDown (‚úì {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅs = x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs))
--     expandFin : ‚àÄ {n} ‚Üí Fin n ‚Üí Fin (suc n)

--   {-# TERMINATING #-}
--   rotateDownBy' : ‚àÄ {ùë®} {ùê¥ : Set ùë®} ‚Üí (xs : ùïÉ ùê¥) ‚Üí Fin (suc (length xs)) ‚Üí ùïÉ ùê¥
--   rotateDownBy' ‚àÖ zero = ‚àÖ
--   rotateDownBy' ‚àÖ (suc ())
--   rotateDownBy' (‚úì x‚ÇÄ‚àâx‚ÇÅs) zero = ‚úì x‚ÇÄ‚àâx‚ÇÅs
--   rotateDownBy' (‚úì {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅs = x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs) (suc n) = rotateDownBy' (rotateDown (‚úì {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅs = x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs)) (expandFin (subst Fin (invariantLength x‚ÇÄ x‚ÇÅs x‚ÇÄ‚àâx‚ÇÅs) n))


-- module M‚ÇÉ where
--   open import Prelude.Nat
--   open import Prelude.Bool
--   open import Prelude.Equality

--   invariantLength‚ÇÅ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {x‚ÇÄ : ùê¥} {x‚ÇÅs} {x‚ÇÄ‚àâx‚ÇÅs : x‚ÇÄ ‚àâ x‚ÇÅs} ‚Üí length x‚ÇÅs ‚â° length (init (‚úì x‚ÇÄ‚àâx‚ÇÅs))
--   invariantLength‚ÇÅ {ùë®} {ùê¥} {x‚ÇÄ} {.‚àÖ} {‚àÖ} = refl
--   invariantLength‚ÇÅ {ùë®} {ùê¥} {x‚ÇÅ} {.(‚úì {_} {_} {x‚ÇÄ} {x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs)} {‚óè {x‚ÇÄ = x‚ÇÄ} x {x‚ÇÅs = x‚ÇÅs} x‚ÇÄ‚àâx‚ÇÅs‚ÇÅ x‚ÇÄ‚àâx‚ÇÅs} = cong suc (invariantLength‚ÇÅ {x‚ÇÅs = x‚ÇÅs})

--   invariantLength‚ÇÇ : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {xs : ùïÉ ùê¥} ‚Üí length xs ‚â° length (rotateDown xs)
--   invariantLength‚ÇÇ {xs = ‚àÖ} = refl
--   invariantLength‚ÇÇ {xs = ‚úì ‚àÖ} = refl
--   invariantLength‚ÇÇ {xs = ‚úì {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅs = x‚ÇÅs} (‚óè {x‚ÇÄ = x‚ÇÅ} x‚ÇÄ‚â¢x‚ÇÅ {x‚ÇÅs = x‚ÇÇs} x‚ÇÄ‚àâx‚ÇÇs x‚ÇÅ‚àâx‚ÇÇs)} = cong (Œª x ‚Üí suc (suc x)) (invariantLength‚ÇÅ {x‚ÇÄ‚àâx‚ÇÅs = x‚ÇÅ‚àâx‚ÇÇs})

--   thm‚ÇÅ : ‚àÄ {n m} ‚Üí IsTrue (lessNat (suc n) m) ‚Üí IsTrue (lessNat n m)
--   thm‚ÇÅ {n} {zero} ()
--   thm‚ÇÅ {zero} {suc zero} ()
--   thm‚ÇÅ {zero} {suc (suc m)} true = true
--   thm‚ÇÅ {suc n} {suc m} x = thm‚ÇÅ {n = n} {m = m} x

--   thm‚ÇÇ : ‚àÄ {n m} ‚Üí IsTrue (lessNat (suc n) m) ‚Üí IsTrue (lessNat n m)
--   thm‚ÇÇ {zero} {zero} ()
--   thm‚ÇÇ {zero} {suc _} _ = true
--   thm‚ÇÇ {suc n} {zero} ()
--   thm‚ÇÇ {suc n} {suc m} x = thm‚ÇÇ {n = n} {m = m} x

--   rotateDownBy' : ‚àÄ {ùë®} {ùê¥ : Set ùë®} {n : ‚Ñï} ‚Üí (xs : ùïÉ ùê¥) (n<xs : IsTrue (n < length xs)) ‚Üí ùïÉ ùê¥
--   rotateDownBy' {ùë®} {ùê¥} {zero} xs _ = xs
--   rotateDownBy' {ùë®} {ùê¥} {suc n} xs n<xs = rotateDownBy' {n = n} (rotateDown xs) (thm‚ÇÇ {n = n} {m = length (rotateDown xs)} (subst (Œª x ‚Üí IsTrue (lessNat (suc n) x)) (invariantLength‚ÇÇ {xs = xs}) n<xs))

-- open import Prelude.Fin
-- open import Data.Fin
