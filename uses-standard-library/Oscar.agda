module Oscar where
  open import Free
  
  open import Data.List.Base
  open import Relation.Binary
  open import Relation.Binary.PropositionalEquality
  open import Relation.Nullary
  open import Relation.Nullary.Decidable
  open import Relation.Nullary.Negation
  open import Data.Sum
  open import Data.Product
  open import Function
  open import Data.Nat.Base
  open import Data.Empty

  postulate
    A : Set
    
  V : A ‚Üí Set‚ÇÅ
  V = Œª _ ‚Üí Free List A

  postulate
    M : ‚Ñï ‚Üí Set‚ÇÅ
    isDecEquivalence/A : IsDecEquivalence {A = A} _‚â°_
    isDecEquivalence/V : (a : A) ‚Üí IsDecEquivalence {A = V a} _‚â°_

  open import Map
  postulate
    m : Map V M isDecEquivalence/A isDecEquivalence/V

  open FreeComparison isDecEquivalence/A
  open Map.Map m

  _‚ãê‚ãí<Map_ : ‚àÄ {PAT EXP : Free List A} {PAT‚ãíEXP : PAT ‚ãí EXP} (PAT‚ãêPAT‚ãíEXP : PAT ‚ãê PAT‚ãíEXP) {s} (binding : M s) ‚Üí Set‚ÇÅ
  PAT‚ãêPAT‚ãíEXP ‚ãê‚ãí<Map binding = ‚àÄ {a} (a‚ààpfPAT‚ãêPAT‚ãíEXP : a ‚ààpf PAT‚ãêPAT‚ãíEXP) ‚Üí ‚àÉ Œª (a‚ààbinding : a ‚àà binding) ‚Üí getpf a‚ààpfPAT‚ãêPAT‚ãíEXP ‚â° get a‚ààbinding

  _Map<‚ãê‚ãí_ : ‚àÄ {s} (binding : M s) {PAT EXP : Free List A} {PAT‚ãíEXP : PAT ‚ãí EXP} (PAT‚ãêPAT‚ãíEXP : PAT ‚ãê PAT‚ãíEXP) ‚Üí Set‚ÇÅ
  binding Map<‚ãê‚ãí PAT‚ãêPAT‚ãíEXP = ‚àÄ {a} (a‚ààbinding : a ‚àà binding) ‚Üí ‚àÉ Œª (a‚ààpfPAT‚ãêPAT‚ãíEXP : a ‚ààpf PAT‚ãêPAT‚ãíEXP) ‚Üí get a‚ààbinding ‚â° getpf a‚ààpfPAT‚ãêPAT‚ãíEXP

  reduce-PureFree-to-map' : ‚àÄ
    {PAT EXP : Free List A}
    {PAT‚ãíEXP : PAT ‚ãí EXP}
    (PAT‚ãêPAT‚ãíEXP : PAT ‚ãê PAT‚ãíEXP)
    ‚Üí Dec $ ‚àÉ Œª s ‚Üí ‚àÉ Œª (binding : M s) ‚Üí PAT‚ãêPAT‚ãíEXP ‚ãê‚ãí<Map binding √ó binding Map<‚ãê‚ãí PAT‚ãêPAT‚ãíEXP
  reduce-PureFree-to-map' (Equal X‚âûY) = yes (0 , ‚àÖ , (Œª ()) , (Œª {a‚àà‚àÖ ‚Üí contradiction ‚àÖ-is-empty a‚àà‚àÖ}))
  reduce-PureFree-to-map' (PureFree x {N = N} g ns) =
    yes $
      1 ,
      (proj‚ÇÅ $ put {k‚ÇÄ = x} (free g ns) {m‚ÇÅ = ‚àÖ} ‚àÖ-is-empty) ,
--      (Œª {a‚ààpfPAT‚ãêPAT‚ãíEXP ‚Üí helper1 a‚ààpfPAT‚ãêPAT‚ãíEXP}) ,
      (Œª { {.x} (singleton .x {N = .N} .g .ns) ‚Üí let s1 , s2 , s3 , s4
                                                         = put {k‚ÇÄ = x} (free g ns) {m‚ÇÅ = ‚àÖ} ‚àÖ-is-empty
                                                   in s2 , (IsDecEquivalence.sym (isDecEquivalence/V x) $ s3) }) ,
      -- (Œª {a‚ààbinding ‚Üí helper2 a‚ààbinding})
      (Œª { {a} a‚ààbinding ‚Üí case IsDecEquivalence._‚âü_ isDecEquivalence/A x a of
        (Œª
        { (yes p) ‚Üí subst (Œª z ‚Üí a ‚ààpf FreeComparison.PureFree z g ns) (sym p) (singleton a g ns) ,
                    (let s1 , s2 , s3 , s4
                                        = put {k‚ÇÄ = a} (free g ns) {m‚ÇÅ = ‚àÖ} ‚àÖ-is-empty
                      in trans (get-is-unique a‚ààbinding (subst (Œª v ‚Üí a ‚àâ ((Œª r ‚Üí proj‚ÇÅ r) $ put (free g ns) ‚àÖ-is-empty) ‚Üí ‚ä•) (sym p) s2)) {!!}

                    )

-- trans (get-is-unique a‚ààbinding (subst _ (sym p) s2)) (subst _ (sym p) s3))
        ; (no ¬¨p) ‚Üí {!!} })
        })
      where
    helper2 : ‚àÄ
      {x : A}
      {N : Set _}
      {g : N ‚Üí Free List A}
      {ns : List N}
      ‚Üí proj‚ÇÅ (put {k‚ÇÄ = x} (free g ns) {m‚ÇÅ = ‚àÖ} ‚àÖ-is-empty) Map<‚ãê‚ãí PureFree x g ns 
    helper2 {x‚ÇÅ} {N‚ÇÅ} {g‚ÇÅ} {ns‚ÇÅ} {a} a‚ààbinding with (IsDecEquivalence._‚âü_ isDecEquivalence/A)  x‚ÇÅ a
    helper2 {a} {N‚ÇÅ} {g‚ÇÅ} {ns‚ÇÅ} {.a} a‚ààbinding | yes refl = (singleton a g‚ÇÅ ns‚ÇÅ) , (let (s1 , s2 , s3 , s4) = (put  {k‚ÇÄ = a} (free g‚ÇÅ ns‚ÇÅ) {m‚ÇÅ = ‚àÖ} ‚àÖ-is-empty) in trans (get-is-unique a‚ààbinding s2) s3)    
    helper2 {x‚ÇÅ} {N‚ÇÅ} {g‚ÇÅ} {ns‚ÇÅ} {a} a‚ààbinding | no a‚â¢x‚ÇÅ with pick a‚ààbinding
    helper2 {x‚ÇÅ} {N‚ÇÅ} {g‚ÇÅ} {ns‚ÇÅ} {a} a‚ààbinding | no a‚â¢x‚ÇÅ | m0 , k‚ààm0‚ÜíŒ£ , k‚â¢a‚Üík‚ààm1‚ÜíŒ£ , a‚àâm0 = let s1 , s2 , s3 , s4
                                                                                                     = put {k‚ÇÄ = x‚ÇÅ} (free g‚ÇÅ ns‚ÇÅ) {m‚ÇÅ = ‚àÖ} ‚àÖ-is-empty
                                                                                               in contradiction ‚àÖ-is-empty (proj‚ÇÅ (k‚â¢a‚Üík‚ààm1‚ÜíŒ£ a‚â¢x‚ÇÅ s2))
  reduce-PureFree-to-map' (Free‚à∑Free‚à∑ notequal PAT‚ãêPAT‚ãíEXP PAT‚ãêPAT‚ãíEXP‚ÇÅ) with reduce-PureFree-to-map' PAT‚ãêPAT‚ãíEXP | reduce-PureFree-to-map' PAT‚ãêPAT‚ãíEXP‚ÇÅ
  reduce-PureFree-to-map' (Free‚à∑Free‚à∑ notequal PAT‚ãêPAT‚ãíEXP PAT‚ãêPAT‚ãíEXP‚ÇÅ) | yes (s1 , m1 , proj‚ÇÉ , proj‚ÇÑ) | yes (s2 , m2 , proj7 , proj8) with union m1 m2
  reduce-PureFree-to-map' (Free‚à∑Free‚à∑ notequal f r) | yes (s1 , m1 , ‚ààf‚ÜíŒ£[‚ààm1,get‚ààf‚â°get‚ãÜ] , ‚ààm1‚ÜíŒ£[‚ààf,get‚ààm1‚â°get‚ãÜ])
                                                    | yes (s2 , m2 , ‚ààr‚ÜíŒ£[‚ààm2,get‚ààr‚â°get‚ãÜ] , ‚ààm2‚ÜíŒ£[‚ààr,get‚ààm2‚â°get‚ãÜ])
                                                    | yes (s3 , m3 , ‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] , ‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] , ‚ààm3‚Üí‚ààm1‚äé‚ààm2) = yes $
    s3 ,
    m3 ,
    (Œª {‚ààfr ‚Üí helper‚Üí ‚ààf‚ÜíŒ£[‚ààm1,get‚ààf‚â°get‚ãÜ] ‚ààr‚ÜíŒ£[‚ààm2,get‚ààr‚â°get‚ãÜ] ‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] ‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] ‚ààfr}) ,
    (Œª {‚ààm3 ‚Üí case ‚ààm3‚Üí‚ààm1‚äé‚ààm2 ‚ààm3 of (Œª { (inj‚ÇÅ ‚ààm1) ‚Üí {!helper‚Üê1 ‚ààm1‚ÜíŒ£[‚ààf,get‚ààm1‚â°get‚ãÜ] ‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] ‚ààm1!} ; (inj‚ÇÇ ‚ààm2) ‚Üí {!helper‚Üê2 ‚ààm2‚ÜíŒ£[‚ààr,get‚ààm2‚â°get‚ãÜ] ‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] ‚ààm2!} }) {-helper‚Üê ‚ààm3‚Üí‚ààm1‚äé‚ààm2 ‚ààm1‚ÜíŒ£[‚ààf,get‚ààm1‚â°get‚ãÜ] ‚ààm2‚ÜíŒ£[‚ààr,get‚ààm2‚â°get‚ãÜ] ‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] ‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] ‚ààm3-}}) where
    helper‚Üí : ‚àÄ
      {a}
      {M N : Set _} ‚Üí
      {f : M ‚Üí Free List A} ‚Üí
      {m : M} {ms : List M} ‚Üí
      {g : N ‚Üí Free List A} ‚Üí
      {n : N} {ns : List N} ‚Üí
      {notequal : ¬¨ free f (m ‚à∑ ms) ‚âû free g (n ‚à∑ ns)} ‚Üí
      {first : f m ‚ãí g n} ‚Üí
      {rest : free f ms ‚ãí free g ns} ‚Üí
      {F : f m ‚ãê first}
      {R : free f ms ‚ãê rest}
      (‚ààf‚ÜíŒ£[‚ààm1,get‚ààf‚â°get‚ãÜ] : ‚àÄ {a} (‚ààf : a ‚ààpf F) ‚Üí Œ£ (a ‚àà m1) (Œª ‚ààm1 ‚Üí getpf ‚ààf ‚â° get ‚ààm1))
      (‚ààr‚ÜíŒ£[‚ààm2,get‚ààf‚â°get‚ãÜ] : ‚àÄ {a} (‚ààr : a ‚ààpf R) ‚Üí Œ£ (a ‚àà m2) (Œª ‚ààm2 ‚Üí getpf ‚ààr ‚â° get ‚ààm2))
      (‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] : ‚àÄ {ùëò : A} (ùëò‚ààm‚ÇÅ : ùëò ‚àâ m1 ‚Üí ‚ä•) ‚Üí Œ£ (ùëò ‚àâ m3 ‚Üí ‚ä•) (Œª ùëò‚ààm‚ÇÄ ‚Üí get ùëò‚ààm‚ÇÅ ‚â° get ùëò‚ààm‚ÇÄ))
      (‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] : ‚àÄ {ùëò : A} (ùëò‚ààm‚ÇÅ : ùëò ‚àâ m2 ‚Üí ‚ä•) ‚Üí Œ£ (ùëò ‚àâ m3 ‚Üí ‚ä•) (Œª ùëò‚ààm‚ÇÄ ‚Üí get ùëò‚ààm‚ÇÅ ‚â° get ùëò‚ààm‚ÇÄ))
      ‚Üí (‚ààfr : a ‚ààpf Free‚à∑Free‚à∑ notequal F R) ‚Üí Œ£ (a ‚àà m3) (Œª a‚ààm3 ‚Üí getpf ‚ààfr ‚â° get a‚ààm3)
    helper‚Üí ‚ààf‚ÜíŒ£[‚ààm1,get‚ààf‚â°get‚ãÜ] _ ‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] _ (descend1 a ‚ààfr) = {!‚ààf‚ÜíŒ£[‚ààm1,get‚ààf‚â°get‚ãÜ] ‚ààfr!}
    helper‚Üí _ ‚ààr‚ÜíŒ£[‚ààm2,get‚ààf‚â°get‚ãÜ] _ ‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] (descend2 a ‚ààfr) = {!!}

    helper‚Üê : ‚àÄ
      {a}
      {s3}
      {m3 : M s3}
      (‚ààm3‚Üí‚ààm1‚äé‚ààm2 : ‚àÄ {ùëò : A} ‚Üí (ùëò ‚àâ m3 ‚Üí ‚ä•) ‚Üí (ùëò ‚àâ m1 ‚Üí ‚ä•) ‚äé (ùëò ‚àâ m2 ‚Üí ‚ä•))
      (‚ààm1‚ÜíŒ£[‚ààf,get‚ààm1‚â°get‚ãÜ] : ‚àÄ {a : A} (a‚ààbinding : a ‚àâ m1 ‚Üí ‚ä•) ‚Üí Œ£ ((isDecEquivalence/A FreeComparison.‚ààpf a) f) (Œª a‚ààpfPAT‚ãêPAT‚ãíEXP ‚Üí get a‚ààbinding ‚â° getpf a‚ààpfPAT‚ãêPAT‚ãíEXP))
      (‚ààm2‚ÜíŒ£[‚ààr,get‚ààm2‚â°get‚ãÜ] : ‚àÄ {a : A} (a‚ààbinding : a ‚àâ m2 ‚Üí ‚ä•) ‚Üí Œ£ ((isDecEquivalence/A FreeComparison.‚ààpf a) r) (Œª a‚ààpfPAT‚ãêPAT‚ãíEXP ‚Üí get a‚ààbinding ‚â° getpf a‚ààpfPAT‚ãêPAT‚ãíEXP))
      (‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] : ‚àÄ {ùëò : A} (ùëò‚ààm‚ÇÅ : ùëò ‚àâ m1 ‚Üí ‚ä•) ‚Üí Œ£ (ùëò ‚àâ m3 ‚Üí ‚ä•) (Œª ùëò‚ààm‚ÇÄ ‚Üí get ùëò‚ààm‚ÇÅ ‚â° get ùëò‚ààm‚ÇÄ))
      (‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] : ‚àÄ {ùëò : A} (ùëò‚ààm‚ÇÅ : ùëò ‚àâ m2 ‚Üí ‚ä•) ‚Üí Œ£ (ùëò ‚àâ m3 ‚Üí ‚ä•) (Œª ùëò‚ààm‚ÇÄ ‚Üí get ùëò‚ààm‚ÇÅ ‚â° get ùëò‚ààm‚ÇÄ))
      ‚Üí (‚ààm3 : a ‚àà m3) ‚Üí Œ£ (a ‚ààpf Free‚à∑Free‚à∑ notequal f r) (Œª ‚ààfr ‚Üí get ‚ààm3 ‚â° getpf ‚ààfr)
    helper‚Üê ‚ààm3‚Üí‚ààm1‚äé‚ààm2 _ _ _ _ ‚ààm3 with ‚ààm3‚Üí‚ààm1‚äé‚ààm2 ‚ààm3
    helper‚Üê _ ‚ààm1‚ÜíŒ£[‚ààf,get‚ààm1‚â°get‚ãÜ] _ ‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] _ _ | inj‚ÇÅ ‚ààm1 = {!‚ààm1‚ÜíŒ£[‚ààf,get‚ààm1‚â°get‚ãÜ] ‚ààm1!} -- -- ‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] ‚ààm1
    helper‚Üê _ _ ‚ààm2‚ÜíŒ£[‚ààr,get‚ààm2‚â°get‚ãÜ] _ ‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] _ | inj‚ÇÇ ‚ààm2 = {!!}
      
    helper‚Üê1 : ‚àÄ
      {a}
      {s1}
      {m1 : M s1}
      (‚ààm1‚ÜíŒ£[‚ààf,get‚ààm1‚â°get‚ãÜ] : ‚àÄ {a : A} (a‚ààbinding : a ‚àâ m1 ‚Üí ‚ä•) ‚Üí Œ£ ((isDecEquivalence/A FreeComparison.‚ààpf a) f) (Œª a‚ààpfPAT‚ãêPAT‚ãíEXP ‚Üí get a‚ààbinding ‚â° getpf a‚ààpfPAT‚ãêPAT‚ãíEXP))
      (‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] : ‚àÄ {ùëò : A} (ùëò‚ààm‚ÇÅ : ùëò ‚àâ m1 ‚Üí ‚ä•) ‚Üí Œ£ (ùëò ‚àâ m3 ‚Üí ‚ä•) (Œª ùëò‚ààm‚ÇÄ ‚Üí get ùëò‚ààm‚ÇÅ ‚â° get ùëò‚ààm‚ÇÄ))
      ‚Üí (‚ààm1 : a ‚àà m1) ‚Üí Œ£ (a ‚ààpf Free‚à∑Free‚à∑ notequal f r) (Œª ‚ààfr ‚Üí get ‚ààm1 ‚â° getpf ‚ààfr)
    helper‚Üê1 ‚ààm1‚ÜíŒ£[‚ààf,get‚ààm1‚â°get‚ãÜ] ‚ààm1‚ÜíŒ£[‚ààm3,get‚ààm1‚â°get‚ãÜ] ‚ààm1 = {!!}
      
    helper‚Üê2 : ‚àÄ
      {a}
      {s2}
      {m2 : M s2}
      (‚ààm2‚ÜíŒ£[‚ààr,get‚ààm2‚â°get‚ãÜ] : ‚àÄ {a : A} (a‚ààbinding : a ‚àâ m2 ‚Üí ‚ä•) ‚Üí Œ£ ((isDecEquivalence/A FreeComparison.‚ààpf a) r) (Œª a‚ààpfPAT‚ãêPAT‚ãíEXP ‚Üí get a‚ààbinding ‚â° getpf a‚ààpfPAT‚ãêPAT‚ãíEXP))
      (‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] : ‚àÄ {ùëò : A} (ùëò‚ààm‚ÇÅ : ùëò ‚àâ m2 ‚Üí ‚ä•) ‚Üí Œ£ (ùëò ‚àâ m3 ‚Üí ‚ä•) (Œª ùëò‚ààm‚ÇÄ ‚Üí get ùëò‚ààm‚ÇÅ ‚â° get ùëò‚ààm‚ÇÄ))
      ‚Üí (‚ààm2 : a ‚àà m2) ‚Üí Œ£ (a ‚ààpf Free‚à∑Free‚à∑ notequal f r) (Œª ‚ààfr ‚Üí get ‚ààm2 ‚â° getpf ‚ààfr)
    helper‚Üê2 ‚ààm2‚ÜíŒ£[‚ààr,get‚ààm1‚â°get‚ãÜ] ‚ààm2‚ÜíŒ£[‚ààm3,get‚ààm2‚â°get‚ãÜ] ‚ààm2 = {!!}
      
  reduce-PureFree-to-map' (Free‚à∑Free‚à∑ notequal PAT‚ãêPAT‚ãíEXP PAT‚ãêPAT‚ãíEXP‚ÇÅ) | yes (s1 , m1 , proj‚ÇÉ , proj‚ÇÑ) | yes (s2 , m2 , proj7 , proj8) | no ¬¨p = {!!}
  reduce-PureFree-to-map' (Free‚à∑Free‚à∑ notequal PAT‚ãêPAT‚ãíEXP PAT‚ãêPAT‚ãíEXP‚ÇÅ) | yes (proj‚ÇÅ , proj‚ÇÇ , proj‚ÇÉ , proj‚ÇÑ) | no ¬¨p = {!!}
  reduce-PureFree-to-map' (Free‚à∑Free‚à∑ notequal PAT‚ãêPAT‚ãíEXP PAT‚ãêPAT‚ãíEXP‚ÇÅ) | no ¬¨p | yes p = {!!}
  reduce-PureFree-to-map' (Free‚à∑Free‚à∑ notequal PAT‚ãêPAT‚ãíEXP PAT‚ãêPAT‚ãíEXP‚ÇÅ) | no ¬¨p | no ¬¨p‚ÇÅ = {!!}

  postulate
    reduce-PureFree-to-map : ‚àÄ
      {PAT EXP : Free List A}
      {PAT‚ãíEXP : PAT ‚ãí EXP}
      (PAT‚ãêPAT‚ãíEXP : PAT ‚ãê PAT‚ãíEXP)
      ‚Üí Dec
        (
          ‚àÉ Œª s
          ‚Üí ‚àÉ Œª (binding : M s)
          ‚Üí (‚àÄ {a} (a‚ààpfPAT‚ãêPAT‚ãíEXP : a ‚ààpf PAT‚ãêPAT‚ãíEXP) ‚Üí ‚àÉ Œª (a‚ààbinding : a ‚àà binding) ‚Üí getpf a‚ààpfPAT‚ãêPAT‚ãíEXP ‚â° get a‚ààbinding)
               √ó
            (‚àÄ {a} (a‚ààbinding : a ‚àà binding) ‚Üí ‚àÉ Œª (a‚ààpfPAT‚ãêPAT‚ãíEXP : a ‚ààpf PAT‚ãêPAT‚ãíEXP) ‚Üí get a‚ààbinding ‚â° getpf a‚ààpfPAT‚ãêPAT‚ãíEXP)
        )
   
    substitute : ‚àÄ {s} ‚Üí M s ‚Üí Free List A ‚Üí Free List A
    substitute-law : ‚àÄ
      {s}
      {binding : M s}
      (PAT : Free List A) ‚Üí
      (cappers : PAT ‚ãí substitute binding PAT)
      ‚Üí ‚àÉ Œª (diff2 : PAT ‚ãê cappers) ‚Üí
          (let rpf2m = reduce-PureFree-to-map diff2)
          ‚Üí ‚àÉ Œª (prf : True rpf2m) ‚Üí
            (let reduced = proj‚ÇÅ (proj‚ÇÇ (toWitness prf))) ‚Üí
            reduced ‚äÜ binding
              √ó
            ‚àÄ
              {a}
              (a‚ààbinding : a ‚àà binding) ‚Üí
              a ‚àâ reduced ‚Üí
              ¬¨ ‚àÉ Œª (a‚ààpfdiff2 : a ‚ààpf diff2) ‚Üí getpf a‚ààpfdiff2 ‚â° get a‚ààbinding

